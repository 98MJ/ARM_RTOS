
20240424_LedBlink_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002940  08002940  00003940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080029b4  080029b4  000039b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029bc  080029bc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029c0  080029c0  000039c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080029c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080029d0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080029d0  000040d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007816  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001903  00000000  00000000  0000b852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000613  00000000  00000000  0000d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015250  00000000  00000000  0000df73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae28  00000000  00000000  000231c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085866  00000000  00000000  0002dfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3851  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  000b3894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000b57fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002928 	.word	0x08002928

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002928 	.word	0x08002928

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd92 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f808 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f89c 	bl	8000610 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f86c 	bl	80005b4 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  apMain();
 80004dc:	f000 fa1e 	bl	800091c <apMain>
 80004e0:	e7fc      	b.n	80004dc <main+0x14>
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b094      	sub	sp, #80	@ 0x50
 80004e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	2230      	movs	r2, #48	@ 0x30
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 f9ec 	bl	80028d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000508:	2300      	movs	r3, #0
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	4b27      	ldr	r3, [pc, #156]	@ (80005ac <SystemClock_Config+0xc8>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000510:	4a26      	ldr	r2, [pc, #152]	@ (80005ac <SystemClock_Config+0xc8>)
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	@ 0x40
 8000518:	4b24      	ldr	r3, [pc, #144]	@ (80005ac <SystemClock_Config+0xc8>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800051c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <SystemClock_Config+0xcc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a20      	ldr	r2, [pc, #128]	@ (80005b0 <SystemClock_Config+0xcc>)
 800052e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000532:	6013      	str	r3, [r2, #0]
 8000534:	4b1e      	ldr	r3, [pc, #120]	@ (80005b0 <SystemClock_Config+0xcc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	2301      	movs	r3, #1
 8000542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000544:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000548:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000554:	2304      	movs	r3, #4
 8000556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000558:	2364      	movs	r3, #100	@ 0x64
 800055a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055c:	2302      	movs	r3, #2
 800055e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fd2d 	bl	8001fc8 <HAL_RCC_OscConfig>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000574:	f000 f8ba 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000578:	230f      	movs	r3, #15
 800057a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	2302      	movs	r3, #2
 800057e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2103      	movs	r1, #3
 8000594:	4618      	mov	r0, r3
 8000596:	f001 ff8f 	bl	80024b8 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005a0:	f000 f8a4 	bl	80006ec <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	@ 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_I2C1_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_I2C1_Init+0x58>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005f2:	f001 f84b 	bl	800168c <HAL_I2C_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f876 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000028 	.word	0x20000028
 8000608:	40005400 	.word	0x40005400
 800060c:	000186a0 	.word	0x000186a0

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	@ 0x28
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a2d      	ldr	r2, [pc, #180]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a26      	ldr	r2, [pc, #152]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0304 	and.w	r3, r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a1f      	ldr	r2, [pc, #124]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a18      	ldr	r2, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_GPIO_Init+0xd4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <MX_GPIO_Init+0xd8>)
 800069e:	f000 ffc1 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80006a2:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_GPIO_Init+0xd8>)
 80006bc:	f000 fe16 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80006c0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_GPIO_Init+0xd8>)
 80006d6:	f000 fe09 	bl	80012ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	@ 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020800 	.word	0x40020800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070c:	6453      	str	r3, [r2, #68]	@ 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	@ 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <HAL_I2C_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12c      	bne.n	80007c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000786:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078c:	2312      	movs	r3, #18
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000798:	2304      	movs	r3, #4
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <HAL_I2C_MspInit+0x8c>)
 80007a4:	f000 fda2 	bl	80012ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b0:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	@ 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <NMI_Handler+0x4>

080007e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <UsageFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 fc33 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000894 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000860:	f7ff ffea 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 f829 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff fe1b 	bl	80004c8 <main>
  bx  lr    
 8000892:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a0:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 80008a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a8:	200000d4 	.word	0x200000d4

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <sys_init>:
led_t led1, led2, led3;


ledState_t ledState = POWER_ON;

void sys_init() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	button_init(&button1, GPIOC, GPIO_PIN_10);
 80008b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008b8:	4911      	ldr	r1, [pc, #68]	@ (8000900 <sys_init+0x50>)
 80008ba:	4812      	ldr	r0, [pc, #72]	@ (8000904 <sys_init+0x54>)
 80008bc:	f000 fb1f 	bl	8000efe <button_init>
	button_init(&button2, GPIOC, GPIO_PIN_11);
 80008c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008c4:	490e      	ldr	r1, [pc, #56]	@ (8000900 <sys_init+0x50>)
 80008c6:	4810      	ldr	r0, [pc, #64]	@ (8000908 <sys_init+0x58>)
 80008c8:	f000 fb19 	bl	8000efe <button_init>
	button_init(&button3, GPIOC, GPIO_PIN_12);
 80008cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008d0:	490b      	ldr	r1, [pc, #44]	@ (8000900 <sys_init+0x50>)
 80008d2:	480e      	ldr	r0, [pc, #56]	@ (800090c <sys_init+0x5c>)
 80008d4:	f000 fb13 	bl	8000efe <button_init>
	led_init(&led1, GPIOC, GPIO_PIN_8);
 80008d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008dc:	4908      	ldr	r1, [pc, #32]	@ (8000900 <sys_init+0x50>)
 80008de:	480c      	ldr	r0, [pc, #48]	@ (8000910 <sys_init+0x60>)
 80008e0:	f000 fb54 	bl	8000f8c <led_init>
	led_init(&led2, GPIOC, GPIO_PIN_6);
 80008e4:	2240      	movs	r2, #64	@ 0x40
 80008e6:	4906      	ldr	r1, [pc, #24]	@ (8000900 <sys_init+0x50>)
 80008e8:	480a      	ldr	r0, [pc, #40]	@ (8000914 <sys_init+0x64>)
 80008ea:	f000 fb4f 	bl	8000f8c <led_init>
	led_init(&led3, GPIOC, GPIO_PIN_5);
 80008ee:	2220      	movs	r2, #32
 80008f0:	4903      	ldr	r1, [pc, #12]	@ (8000900 <sys_init+0x50>)
 80008f2:	4809      	ldr	r0, [pc, #36]	@ (8000918 <sys_init+0x68>)
 80008f4:	f000 fb4a 	bl	8000f8c <led_init>

	LCD_init();
 80008f8:	f000 f98c 	bl	8000c14 <LCD_init>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020800 	.word	0x40020800
 8000904:	2000007c 	.word	0x2000007c
 8000908:	20000088 	.word	0x20000088
 800090c:	20000094 	.word	0x20000094
 8000910:	200000a0 	.word	0x200000a0
 8000914:	200000a8 	.word	0x200000a8
 8000918:	200000b0 	.word	0x200000b0

0800091c <apMain>:


int apMain() {
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0

	sys_init();
 8000922:	f7ff ffc5 	bl	80008b0 <sys_init>
	LCD_gotoXY(0, 0);
 8000926:	2100      	movs	r1, #0
 8000928:	2000      	movs	r0, #0
 800092a:	f000 fa96 	bl	8000e5a <LCD_gotoXY>
	LCD_writeString("Hello STM32!!");
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <apMain+0x2c>)
 8000930:	f000 fab4 	bl	8000e9c <LCD_writeString>
	LCD_writeStringXY(1, 0, "Power On State");
 8000934:	4a05      	ldr	r2, [pc, #20]	@ (800094c <apMain+0x30>)
 8000936:	2100      	movs	r1, #0
 8000938:	2001      	movs	r0, #1
 800093a:	f000 facb 	bl	8000ed4 <LCD_writeStringXY>

	char buff[50];
	int counter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34

	while (1) {
		apRun();
 8000942:	f000 f805 	bl	8000950 <apRun>
 8000946:	e7fc      	b.n	8000942 <apMain+0x26>
 8000948:	08002940 	.word	0x08002940
 800094c:	08002950 	.word	0x08002950

08000950 <apRun>:
	}

	return 0;
}

void apRun() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	switch (ledState) {
 8000954:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <apRun+0x48>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d817      	bhi.n	800098c <apRun+0x3c>
 800095c:	a201      	add	r2, pc, #4	@ (adr r2, 8000964 <apRun+0x14>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000975 	.word	0x08000975
 8000968:	0800097b 	.word	0x0800097b
 800096c:	08000981 	.word	0x08000981
 8000970:	08000987 	.word	0x08000987
	case POWER_ON:
		powerOnStateRun();
 8000974:	f000 f812 	bl	800099c <powerOnStateRun>
		break;
 8000978:	e00b      	b.n	8000992 <apRun+0x42>
	case STATE1:
		state1StateRun();
 800097a:	f000 f85b 	bl	8000a34 <state1StateRun>
		break;
 800097e:	e008      	b.n	8000992 <apRun+0x42>
	case STATE2:
		state2StateRun();
 8000980:	f000 f89e 	bl	8000ac0 <state2StateRun>
		break;
 8000984:	e005      	b.n	8000992 <apRun+0x42>
	case STATE3:
		state3StateRun();
 8000986:	f000 f8e1 	bl	8000b4c <state3StateRun>
		break;
 800098a:	e002      	b.n	8000992 <apRun+0x42>
	default:
		powerOnStateRun();
 800098c:	f000 f806 	bl	800099c <powerOnStateRun>
		break;
 8000990:	bf00      	nop
	}
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000b8 	.word	0x200000b8

0800099c <powerOnStateRun>:

void powerOnStateRun(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	if(button_getState(&button1) == ACT_RELEASED){
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <powerOnStateRun+0x78>)
 80009a4:	f000 fac1 	bl	8000f2a <button_getState>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d103      	bne.n	80009b6 <powerOnStateRun+0x1a>
		ledState = STATE1;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <powerOnStateRun+0x7c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e012      	b.n	80009dc <powerOnStateRun+0x40>
	} else if(button_getState(&button2) == ACT_RELEASED){
 80009b6:	4819      	ldr	r0, [pc, #100]	@ (8000a1c <powerOnStateRun+0x80>)
 80009b8:	f000 fab7 	bl	8000f2a <button_getState>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d103      	bne.n	80009ca <powerOnStateRun+0x2e>
		ledState = STATE2;
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <powerOnStateRun+0x7c>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e008      	b.n	80009dc <powerOnStateRun+0x40>
	} else if(button_getState(&button3) == ACT_RELEASED){
 80009ca:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <powerOnStateRun+0x84>)
 80009cc:	f000 faad 	bl	8000f2a <button_getState>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d102      	bne.n	80009dc <powerOnStateRun+0x40>
		ledState = STATE3;
 80009d6:	4b10      	ldr	r3, [pc, #64]	@ (8000a18 <powerOnStateRun+0x7c>)
 80009d8:	2203      	movs	r2, #3
 80009da:	701a      	strb	r2, [r3, #0]
	}

	static uint32_t prevTime = 0;
	uint32_t curTime = HAL_GetTick();
 80009dc:	f000 fb70 	bl	80010c0 <HAL_GetTick>
 80009e0:	6078      	str	r0, [r7, #4]

	if (curTime - prevTime < 500){
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <powerOnStateRun+0x88>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009ee:	d30c      	bcc.n	8000a0a <powerOnStateRun+0x6e>
		return;
	}
	prevTime = curTime;
 80009f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a24 <powerOnStateRun+0x88>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]

	led_toggle(&led1);
 80009f6:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <powerOnStateRun+0x8c>)
 80009f8:	f000 faeb 	bl	8000fd2 <led_toggle>
	led_toggle(&led2);
 80009fc:	480b      	ldr	r0, [pc, #44]	@ (8000a2c <powerOnStateRun+0x90>)
 80009fe:	f000 fae8 	bl	8000fd2 <led_toggle>
	led_toggle(&led3);
 8000a02:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <powerOnStateRun+0x94>)
 8000a04:	f000 fae5 	bl	8000fd2 <led_toggle>
 8000a08:	e000      	b.n	8000a0c <powerOnStateRun+0x70>
		return;
 8000a0a:	bf00      	nop

}
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000007c 	.word	0x2000007c
 8000a18:	200000b8 	.word	0x200000b8
 8000a1c:	20000088 	.word	0x20000088
 8000a20:	20000094 	.word	0x20000094
 8000a24:	200000bc 	.word	0x200000bc
 8000a28:	200000a0 	.word	0x200000a0
 8000a2c:	200000a8 	.word	0x200000a8
 8000a30:	200000b0 	.word	0x200000b0

08000a34 <state1StateRun>:

void state1StateRun(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	if(button_getState(&button2) == ACT_RELEASED){
 8000a3a:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <state1StateRun+0x6c>)
 8000a3c:	f000 fa75 	bl	8000f2a <button_getState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d103      	bne.n	8000a4e <state1StateRun+0x1a>
		ledState = STATE2;
 8000a46:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <state1StateRun+0x70>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e008      	b.n	8000a60 <state1StateRun+0x2c>
	} else if(button_getState(&button3) == ACT_RELEASED){
 8000a4e:	4816      	ldr	r0, [pc, #88]	@ (8000aa8 <state1StateRun+0x74>)
 8000a50:	f000 fa6b 	bl	8000f2a <button_getState>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d102      	bne.n	8000a60 <state1StateRun+0x2c>
		ledState = STATE3;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <state1StateRun+0x70>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	701a      	strb	r2, [r3, #0]
	}

	static uint32_t prevTime = 0;
	uint32_t curTime = HAL_GetTick();
 8000a60:	f000 fb2e 	bl	80010c0 <HAL_GetTick>
 8000a64:	6078      	str	r0, [r7, #4]

	if (curTime - prevTime < 200){
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <state1StateRun+0x78>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8000a70:	d911      	bls.n	8000a96 <state1StateRun+0x62>
		return;
	}
	prevTime = curTime;
 8000a72:	4a0e      	ldr	r2, [pc, #56]	@ (8000aac <state1StateRun+0x78>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6013      	str	r3, [r2, #0]

	led_toggle(&led1);
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <state1StateRun+0x7c>)
 8000a7a:	f000 faaa 	bl	8000fd2 <led_toggle>
	led_off(&led2);
 8000a7e:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <state1StateRun+0x80>)
 8000a80:	f000 fa97 	bl	8000fb2 <led_off>
	led_off(&led3);
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <state1StateRun+0x84>)
 8000a86:	f000 fa94 	bl	8000fb2 <led_off>
	LCD_writeStringXY(1, 0, "STATE1           ");
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000abc <state1StateRun+0x88>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fa20 	bl	8000ed4 <LCD_writeStringXY>
 8000a94:	e000      	b.n	8000a98 <state1StateRun+0x64>
		return;
 8000a96:	bf00      	nop
}
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000088 	.word	0x20000088
 8000aa4:	200000b8 	.word	0x200000b8
 8000aa8:	20000094 	.word	0x20000094
 8000aac:	200000c0 	.word	0x200000c0
 8000ab0:	200000a0 	.word	0x200000a0
 8000ab4:	200000a8 	.word	0x200000a8
 8000ab8:	200000b0 	.word	0x200000b0
 8000abc:	08002960 	.word	0x08002960

08000ac0 <state2StateRun>:

void state2StateRun(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	if(button_getState(&button1) == ACT_RELEASED){
 8000ac6:	4819      	ldr	r0, [pc, #100]	@ (8000b2c <state2StateRun+0x6c>)
 8000ac8:	f000 fa2f 	bl	8000f2a <button_getState>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d103      	bne.n	8000ada <state2StateRun+0x1a>
		ledState = STATE1;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <state2StateRun+0x70>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e008      	b.n	8000aec <state2StateRun+0x2c>
	} else if(button_getState(&button3) == ACT_RELEASED){
 8000ada:	4816      	ldr	r0, [pc, #88]	@ (8000b34 <state2StateRun+0x74>)
 8000adc:	f000 fa25 	bl	8000f2a <button_getState>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	d102      	bne.n	8000aec <state2StateRun+0x2c>
		ledState = STATE3;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <state2StateRun+0x70>)
 8000ae8:	2203      	movs	r2, #3
 8000aea:	701a      	strb	r2, [r3, #0]
	}

	static uint32_t prevTime = 0;
	uint32_t curTime = HAL_GetTick();
 8000aec:	f000 fae8 	bl	80010c0 <HAL_GetTick>
 8000af0:	6078      	str	r0, [r7, #4]

	if (curTime - prevTime < 100){
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <state2StateRun+0x78>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	2b63      	cmp	r3, #99	@ 0x63
 8000afc:	d911      	bls.n	8000b22 <state2StateRun+0x62>
		return;
	}
	prevTime = curTime;
 8000afe:	4a0e      	ldr	r2, [pc, #56]	@ (8000b38 <state2StateRun+0x78>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6013      	str	r3, [r2, #0]

	led_off(&led1);
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <state2StateRun+0x7c>)
 8000b06:	f000 fa54 	bl	8000fb2 <led_off>
	led_toggle(&led2);
 8000b0a:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <state2StateRun+0x80>)
 8000b0c:	f000 fa61 	bl	8000fd2 <led_toggle>
	led_toggle(&led3);
 8000b10:	480c      	ldr	r0, [pc, #48]	@ (8000b44 <state2StateRun+0x84>)
 8000b12:	f000 fa5e 	bl	8000fd2 <led_toggle>
	LCD_writeStringXY(1, 0, "STATE2           ");
 8000b16:	4a0c      	ldr	r2, [pc, #48]	@ (8000b48 <state2StateRun+0x88>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 f9da 	bl	8000ed4 <LCD_writeStringXY>
 8000b20:	e000      	b.n	8000b24 <state2StateRun+0x64>
		return;
 8000b22:	bf00      	nop
}
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000007c 	.word	0x2000007c
 8000b30:	200000b8 	.word	0x200000b8
 8000b34:	20000094 	.word	0x20000094
 8000b38:	200000c4 	.word	0x200000c4
 8000b3c:	200000a0 	.word	0x200000a0
 8000b40:	200000a8 	.word	0x200000a8
 8000b44:	200000b0 	.word	0x200000b0
 8000b48:	08002974 	.word	0x08002974

08000b4c <state3StateRun>:

void state3StateRun(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
	if(button_getState(&button1) == ACT_RELEASED){
 8000b52:	4819      	ldr	r0, [pc, #100]	@ (8000bb8 <state3StateRun+0x6c>)
 8000b54:	f000 f9e9 	bl	8000f2a <button_getState>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d103      	bne.n	8000b66 <state3StateRun+0x1a>
		ledState = STATE1;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <state3StateRun+0x70>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e008      	b.n	8000b78 <state3StateRun+0x2c>
	} else if(button_getState(&button2) == ACT_RELEASED){
 8000b66:	4816      	ldr	r0, [pc, #88]	@ (8000bc0 <state3StateRun+0x74>)
 8000b68:	f000 f9df 	bl	8000f2a <button_getState>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	d102      	bne.n	8000b78 <state3StateRun+0x2c>
		ledState = STATE2;
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <state3StateRun+0x70>)
 8000b74:	2202      	movs	r2, #2
 8000b76:	701a      	strb	r2, [r3, #0]
	}

	static uint32_t prevTime = 0;
	uint32_t curTime = HAL_GetTick();
 8000b78:	f000 faa2 	bl	80010c0 <HAL_GetTick>
 8000b7c:	6078      	str	r0, [r7, #4]

	if (curTime - prevTime < 1000){
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <state3StateRun+0x78>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b8a:	d311      	bcc.n	8000bb0 <state3StateRun+0x64>
		return;
	}
	prevTime = curTime;
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <state3StateRun+0x78>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]

	led_toggle(&led1);
 8000b92:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <state3StateRun+0x7c>)
 8000b94:	f000 fa1d 	bl	8000fd2 <led_toggle>
	led_off(&led2);
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <state3StateRun+0x80>)
 8000b9a:	f000 fa0a 	bl	8000fb2 <led_off>
	led_toggle(&led3);
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <state3StateRun+0x84>)
 8000ba0:	f000 fa17 	bl	8000fd2 <led_toggle>
	LCD_writeStringXY(1, 0, "STATE3           ");
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd4 <state3StateRun+0x88>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 f993 	bl	8000ed4 <LCD_writeStringXY>
 8000bae:	e000      	b.n	8000bb2 <state3StateRun+0x66>
		return;
 8000bb0:	bf00      	nop
}
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000007c 	.word	0x2000007c
 8000bbc:	200000b8 	.word	0x200000b8
 8000bc0:	20000088 	.word	0x20000088
 8000bc4:	200000c8 	.word	0x200000c8
 8000bc8:	200000a0 	.word	0x200000a0
 8000bcc:	200000a8 	.word	0x200000a8
 8000bd0:	200000b0 	.word	0x200000b0
 8000bd4:	08002988 	.word	0x08002988

08000bd8 <LCD_delay>:


extern I2C_HandleTypeDef hi2c1;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 fa79 	bl	80010d8 <HAL_Delay>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <LCD_backLightOn>:

void LCD_backLightOn(){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BACKLIGHT);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <LCD_backLightOn+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <LCD_backLightOn+0x20>)
 8000c00:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8000c02:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <LCD_backLightOn+0x20>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f832 	bl	8000c70 <LCD_sendData>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200000cc 	.word	0x200000cc

08000c14 <LCD_init>:

void LCD_init(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	LCD_delay(15);
 8000c18:	200f      	movs	r0, #15
 8000c1a:	f7ff ffdd 	bl	8000bd8 <LCD_delay>
	LCD_cmdMode();
 8000c1e:	f000 f83b 	bl	8000c98 <LCD_cmdMode>
	LCD_writeMode();
 8000c22:	f000 f859 	bl	8000cd8 <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 8000c26:	2030      	movs	r0, #48	@ 0x30
 8000c28:	f000 f886 	bl	8000d38 <LCD_sendHighNibble>
	LCD_delay(5);
 8000c2c:	2005      	movs	r0, #5
 8000c2e:	f7ff ffd3 	bl	8000bd8 <LCD_delay>
	LCD_sendHighNibble(0x30);
 8000c32:	2030      	movs	r0, #48	@ 0x30
 8000c34:	f000 f880 	bl	8000d38 <LCD_sendHighNibble>
	LCD_delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff ffcd 	bl	8000bd8 <LCD_delay>
	LCD_sendHighNibble(0x30);
 8000c3e:	2030      	movs	r0, #48	@ 0x30
 8000c40:	f000 f87a 	bl	8000d38 <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 8000c44:	2020      	movs	r0, #32
 8000c46:	f000 f877 	bl	8000d38 <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET); //function set
 8000c4a:	2028      	movs	r0, #40	@ 0x28
 8000c4c:	f000 f8d2 	bl	8000df4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); //display off
 8000c50:	2008      	movs	r0, #8
 8000c52:	f000 f8cf 	bl	8000df4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR); //display clear
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 f8cc 	bl	8000df4 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET); //Entry mode set
 8000c5c:	2006      	movs	r0, #6
 8000c5e:	f000 f8c9 	bl	8000df4 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8000c62:	200c      	movs	r0, #12
 8000c64:	f000 f8c6 	bl	8000df4 <LCD_sendByte>
	LCD_backLightOn();
 8000c68:	f7ff ffc2 	bl	8000bf0 <LCD_backLightOn>
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <LCD_sendData>:


void LCD_sendData(uint8_t data){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, lcdDevAddr_w, &data, 1, 1000);
 8000c7a:	1dfa      	adds	r2, r7, #7
 8000c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	214e      	movs	r1, #78	@ 0x4e
 8000c86:	4803      	ldr	r0, [pc, #12]	@ (8000c94 <LCD_sendData+0x24>)
 8000c88:	f000 fe44 	bl	8001914 <HAL_I2C_Master_Transmit>
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000028 	.word	0x20000028

08000c98 <LCD_cmdMode>:

void LCD_cmdMode(){
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <LCD_cmdMode+0x1c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	f023 0301 	bic.w	r3, r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <LCD_cmdMode+0x1c>)
 8000ca8:	701a      	strb	r2, [r3, #0]
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	200000cc 	.word	0x200000cc

08000cb8 <LCD_charMode>:
void LCD_charMode(){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <LCD_charMode+0x1c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4b03      	ldr	r3, [pc, #12]	@ (8000cd4 <LCD_charMode+0x1c>)
 8000cc8:	701a      	strb	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	200000cc 	.word	0x200000cc

08000cd8 <LCD_writeMode>:
void LCD_writeMode(){
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <LCD_writeMode+0x1c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f023 0302 	bic.w	r3, r3, #2
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <LCD_writeMode+0x1c>)
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	200000cc 	.word	0x200000cc

08000cf8 <LCD_E_High>:
void LCD_E_High(){
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <LCD_E_High+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <LCD_E_High+0x1c>)
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	200000cc 	.word	0x200000cc

08000d18 <LCD_E_Low>:
void LCD_E_Low(){
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <LCD_E_Low+0x1c>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f023 0304 	bic.w	r3, r3, #4
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <LCD_E_Low+0x1c>)
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200000cc 	.word	0x200000cc

08000d38 <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	//enable이 falling edge인 지점에서 전송
	LCD_E_High();
 8000d42:	f7ff ffd9 	bl	8000cf8 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <LCD_sendHighNibble+0x5c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	b25a      	sxtb	r2, r3
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	f023 030f 	bic.w	r3, r3, #15
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b25b      	sxtb	r3, r3
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <LCD_sendHighNibble+0x5c>)
 8000d64:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <LCD_sendHighNibble+0x5c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff80 	bl	8000c70 <LCD_sendData>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 f9b1 	bl	80010d8 <HAL_Delay>
	LCD_E_Low();
 8000d76:	f7ff ffcf 	bl	8000d18 <LCD_E_Low>
	LCD_sendData(lcdData);
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <LCD_sendHighNibble+0x5c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff76 	bl	8000c70 <LCD_sendData>
	HAL_Delay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f000 f9a7 	bl	80010d8 <HAL_Delay>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000cc 	.word	0x200000cc

08000d98 <LCD_sendLowNibble>:
void LCD_sendLowNibble(uint8_t data){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	//enable이 falling edge인 지점에서 전송
	LCD_E_High();
 8000da2:	f7ff ffa9 	bl	8000cf8 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <LCD_sendLowNibble+0x58>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f003 030f 	and.w	r3, r3, #15
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	b25b      	sxtb	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <LCD_sendLowNibble+0x58>)
 8000dc0:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <LCD_sendLowNibble+0x58>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff52 	bl	8000c70 <LCD_sendData>
	HAL_Delay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 f983 	bl	80010d8 <HAL_Delay>
	LCD_E_Low();
 8000dd2:	f7ff ffa1 	bl	8000d18 <LCD_E_Low>
	LCD_sendData(lcdData);
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <LCD_sendLowNibble+0x58>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff48 	bl	8000c70 <LCD_sendData>
	HAL_Delay(1);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 f979 	bl	80010d8 <HAL_Delay>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000cc 	.word	0x200000cc

08000df4 <LCD_sendByte>:


void LCD_sendByte(uint8_t data) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); // D7~D4
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff99 	bl	8000d38 <LCD_sendHighNibble>
	LCD_sendLowNibble(data); // D3~D0
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffc5 	bl	8000d98 <LCD_sendLowNibble>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 8000e20:	f7ff ff3a 	bl	8000c98 <LCD_cmdMode>
	LCD_writeMode();
 8000e24:	f7ff ff58 	bl	8000cd8 <LCD_writeMode>
	LCD_sendByte(data);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffe2 	bl	8000df4 <LCD_sendByte>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <LCD_writeCharData>:
void LCD_writeCharData(uint8_t data) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 8000e42:	f7ff ff39 	bl	8000cb8 <LCD_charMode>
	LCD_writeMode();
 8000e46:	f7ff ff47 	bl	8000cd8 <LCD_writeMode>
	LCD_sendByte(data);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffd1 	bl	8000df4 <LCD_sendByte>

}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	460a      	mov	r2, r1
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	4613      	mov	r3, r2
 8000e68:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	f003 030f 	and.w	r3, r3, #15
 8000e70:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) + col;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	019b      	lsls	r3, r3, #6
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	4413      	add	r3, r2
 8000e84:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	3b80      	subs	r3, #128	@ 0x80
 8000e8a:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8000e8c:	7bbb      	ldrb	r3, [r7, #14]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffc1 	bl	8000e16 <LCD_writeCmdData>

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LCD_writeString>:

void LCD_writeString(char *str){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++){
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e009      	b.n	8000ebe <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ffc0 	bl	8000e38 <LCD_writeCharData>
	for (int i=0; str[i]; i++){
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1ef      	bne.n	8000eaa <LCD_writeString+0xe>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	603a      	str	r2, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8000ee4:	79ba      	ldrb	r2, [r7, #6]
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ffb5 	bl	8000e5a <LCD_gotoXY>
	LCD_writeString(str);
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f7ff ffd3 	bl	8000e9c <LCD_writeString>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <button_init>:
 *      Author: kccistc
 */

#include "button.h"

void button_init(button_t *button, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000efe:	b480      	push	{r7}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	88fa      	ldrh	r2, [r7, #6]
 8000f16:	809a      	strh	r2, [r3, #4]
	button->prevState = RELEASED;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	609a      	str	r2, [r3, #8]
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <button_getState>:

button_state_t button_getState(button_t *button){
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]

	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	889b      	ldrh	r3, [r3, #4]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f000 fb59 	bl	80015f4 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	60fb      	str	r3, [r7, #12]
	if((button->prevState == RELEASED) && (curState == PUSHED)){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10a      	bne.n	8000f64 <button_getState+0x3a>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d107      	bne.n	8000f64 <button_getState+0x3a>
		HAL_Delay(50);
 8000f54:	2032      	movs	r0, #50	@ 0x32
 8000f56:	f000 f8bf 	bl	80010d8 <HAL_Delay>
		button->prevState = PUSHED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e00f      	b.n	8000f84 <button_getState+0x5a>
	} else if((button->prevState == PUSHED) && (curState == RELEASED)){
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10a      	bne.n	8000f82 <button_getState+0x58>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <button_getState+0x58>
		HAL_Delay(50);
 8000f72:	2032      	movs	r0, #50	@ 0x32
 8000f74:	f000 f8b0 	bl	80010d8 <HAL_Delay>
		button->prevState = RELEASED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e000      	b.n	8000f84 <button_getState+0x5a>
	}
	return NO_ACT;
 8000f82:	2302      	movs	r3, #2
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <led_init>:
 */

#include "led.h"


void led_init(led_t *led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	80fb      	strh	r3, [r7, #6]
	led->GPIOx = GPIOx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	601a      	str	r2, [r3, #0]
	led->GPIO_Pin = GPIO_Pin;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	809a      	strh	r2, [r3, #4]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <led_off>:

void led_on(led_t *led){
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
}
void led_off(led_t *led){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	889b      	ldrh	r3, [r3, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f000 fb2d 	bl	8001624 <HAL_GPIO_WritePin>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <led_toggle>:
void led_toggle(led_t *led){
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	889b      	ldrh	r3, [r3, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f000 fb36 	bl	8001656 <HAL_GPIO_TogglePin>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f931 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fb66 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f93b 	bl	80012d2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f911 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200000d0 	.word	0x200000d0

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200000d0 	.word	0x200000d0

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	@ (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	@ (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	@ 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff8e 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	@ (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff47 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff5c 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff8e 	bl	80011d8 <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffb0 	bl	8001240 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	e159      	b.n	80015bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	429a      	cmp	r2, r3
 8001322:	f040 8148 	bne.w	80015b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	2b02      	cmp	r3, #2
 800133c:	d130      	bne.n	80013a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 0201 	and.w	r2, r3, #1
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	d017      	beq.n	80013dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d123      	bne.n	8001430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	08da      	lsrs	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3208      	adds	r2, #8
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0203 	and.w	r2, r3, #3
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a2 	beq.w	80015b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b57      	ldr	r3, [pc, #348]	@ (80015d4 <HAL_GPIO_Init+0x2e8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a56      	ldr	r2, [pc, #344]	@ (80015d4 <HAL_GPIO_Init+0x2e8>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b54      	ldr	r3, [pc, #336]	@ (80015d4 <HAL_GPIO_Init+0x2e8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a52      	ldr	r2, [pc, #328]	@ (80015d8 <HAL_GPIO_Init+0x2ec>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a49      	ldr	r2, [pc, #292]	@ (80015dc <HAL_GPIO_Init+0x2f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x202>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a48      	ldr	r2, [pc, #288]	@ (80015e0 <HAL_GPIO_Init+0x2f4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x1fe>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a47      	ldr	r2, [pc, #284]	@ (80015e4 <HAL_GPIO_Init+0x2f8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x1fa>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a46      	ldr	r2, [pc, #280]	@ (80015e8 <HAL_GPIO_Init+0x2fc>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x1f6>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a45      	ldr	r2, [pc, #276]	@ (80015ec <HAL_GPIO_Init+0x300>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x1f2>
 80014da:	2304      	movs	r3, #4
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014de:	2307      	movs	r3, #7
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x204>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	@ (80015d8 <HAL_GPIO_Init+0x2ec>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b38      	ldr	r3, [pc, #224]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001532:	4a2f      	ldr	r2, [pc, #188]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001538:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800155c:	4a24      	ldr	r2, [pc, #144]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001586:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b0:	4a0f      	ldr	r2, [pc, #60]	@ (80015f0 <HAL_GPIO_Init+0x304>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f aea2 	bls.w	8001308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	@ 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e001      	b.n	8001616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43d9      	mvns	r1, r3
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	400b      	ands	r3, r1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e12b      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff f848 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016f0:	f001 f8da 	bl	80028a8 <HAL_RCC_GetPCLK1Freq>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a81      	ldr	r2, [pc, #516]	@ (8001900 <HAL_I2C_Init+0x274>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d807      	bhi.n	8001710 <HAL_I2C_Init+0x84>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a80      	ldr	r2, [pc, #512]	@ (8001904 <HAL_I2C_Init+0x278>)
 8001704:	4293      	cmp	r3, r2
 8001706:	bf94      	ite	ls
 8001708:	2301      	movls	r3, #1
 800170a:	2300      	movhi	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e006      	b.n	800171e <HAL_I2C_Init+0x92>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a7d      	ldr	r2, [pc, #500]	@ (8001908 <HAL_I2C_Init+0x27c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	bf94      	ite	ls
 8001718:	2301      	movls	r3, #1
 800171a:	2300      	movhi	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0e7      	b.n	80018f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4a78      	ldr	r2, [pc, #480]	@ (800190c <HAL_I2C_Init+0x280>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9b      	lsrs	r3, r3, #18
 8001730:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	4a6a      	ldr	r2, [pc, #424]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d802      	bhi.n	8001760 <HAL_I2C_Init+0xd4>
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3301      	adds	r3, #1
 800175e:	e009      	b.n	8001774 <HAL_I2C_Init+0xe8>
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	4a69      	ldr	r2, [pc, #420]	@ (8001910 <HAL_I2C_Init+0x284>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	3301      	adds	r3, #1
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001786:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	495c      	ldr	r1, [pc, #368]	@ (8001900 <HAL_I2C_Init+0x274>)
 8001790:	428b      	cmp	r3, r1
 8001792:	d819      	bhi.n	80017c8 <HAL_I2C_Init+0x13c>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e59      	subs	r1, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a2:	1c59      	adds	r1, r3, #1
 80017a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017a8:	400b      	ands	r3, r1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_I2C_Init+0x138>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c2:	e051      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c4:	2304      	movs	r3, #4
 80017c6:	e04f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <HAL_I2C_Init+0x168>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e012      	b.n	800181a <HAL_I2C_Init+0x18e>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Init+0x196>
 800181e:	2301      	movs	r3, #1
 8001820:	e022      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10e      	bne.n	8001848 <HAL_I2C_Init+0x1bc>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1e58      	subs	r0, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6859      	ldr	r1, [r3, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	440b      	add	r3, r1
 8001838:	fbb0 f3f3 	udiv	r3, r0, r3
 800183c:	3301      	adds	r3, #1
 800183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001846:	e00f      	b.n	8001868 <HAL_I2C_Init+0x1dc>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001896:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6911      	ldr	r1, [r2, #16]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68d2      	ldr	r2, [r2, #12]
 80018a2:	4311      	orrs	r1, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	430a      	orrs	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	000186a0 	.word	0x000186a0
 8001904:	001e847f 	.word	0x001e847f
 8001908:	003d08ff 	.word	0x003d08ff
 800190c:	431bde83 	.word	0x431bde83
 8001910:	10624dd3 	.word	0x10624dd3

08001914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	461a      	mov	r2, r3
 8001920:	460b      	mov	r3, r1
 8001922:	817b      	strh	r3, [r7, #10]
 8001924:	4613      	mov	r3, r2
 8001926:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fbca 	bl	80010c0 <HAL_GetTick>
 800192c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b20      	cmp	r3, #32
 8001938:	f040 80e0 	bne.w	8001afc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2319      	movs	r3, #25
 8001942:	2201      	movs	r2, #1
 8001944:	4970      	ldr	r1, [pc, #448]	@ (8001b08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f964 	bl	8001c14 <I2C_WaitOnFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	e0d3      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_I2C_Master_Transmit+0x50>
 8001960:	2302      	movs	r3, #2
 8001962:	e0cc      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d007      	beq.n	800198a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2221      	movs	r2, #33	@ 0x21
 800199e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2210      	movs	r2, #16
 80019a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	893a      	ldrh	r2, [r7, #8]
 80019ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4a50      	ldr	r2, [pc, #320]	@ (8001b0c <HAL_I2C_Master_Transmit+0x1f8>)
 80019ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f89c 	bl	8001b10 <I2C_MasterRequestWrite>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e08d      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019f8:	e066      	b.n	8001ac8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fa22 	bl	8001e48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00d      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d107      	bne.n	8001a22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06b      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d11b      	bne.n	8001a9c <HAL_I2C_Master_Transmit+0x188>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d017      	beq.n	8001a9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7c:	1c5a      	adds	r2, r3, #1
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	6a39      	ldr	r1, [r7, #32]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fa19 	bl	8001ed8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d107      	bne.n	8001ac4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e01a      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d194      	bne.n	80019fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001afc:	2302      	movs	r3, #2
  }
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	00100002 	.word	0x00100002
 8001b0c:	ffff0000 	.word	0xffff0000

08001b10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d006      	beq.n	8001b3a <I2C_MasterRequestWrite+0x2a>
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d003      	beq.n	8001b3a <I2C_MasterRequestWrite+0x2a>
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b38:	d108      	bne.n	8001b4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e00b      	b.n	8001b64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b50:	2b12      	cmp	r3, #18
 8001b52:	d107      	bne.n	8001b64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f84f 	bl	8001c14 <I2C_WaitOnFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00d      	beq.n	8001b98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b8a:	d103      	bne.n	8001b94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e035      	b.n	8001c04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ba0:	d108      	bne.n	8001bb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	e01b      	b.n	8001bec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bb4:	897b      	ldrh	r3, [r7, #10]
 8001bb6:	11db      	asrs	r3, r3, #7
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f003 0306 	and.w	r3, r3, #6
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f063 030f 	orn	r3, r3, #15
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <I2C_MasterRequestWrite+0xfc>)
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 f898 	bl	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e010      	b.n	8001c04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4907      	ldr	r1, [pc, #28]	@ (8001c10 <I2C_MasterRequestWrite+0x100>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f888 	bl	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	00010008 	.word	0x00010008
 8001c10:	00010002 	.word	0x00010002

08001c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c24:	e048      	b.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2c:	d044      	beq.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2e:	f7ff fa47 	bl	80010c0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d302      	bcc.n	8001c44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d139      	bne.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10d      	bne.n	8001c6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	43da      	mvns	r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	e00c      	b.n	8001c84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	43da      	mvns	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	4013      	ands	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d116      	bne.n	8001cb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f043 0220 	orr.w	r2, r3, #32
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e023      	b.n	8001d00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0c1b      	lsrs	r3, r3, #16
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d10d      	bne.n	8001cde <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	e00c      	b.n	8001cf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf0c      	ite	eq
 8001cf0:	2301      	moveq	r3, #1
 8001cf2:	2300      	movne	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d093      	beq.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d16:	e071      	b.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d26:	d123      	bne.n	8001d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f043 0204 	orr.w	r2, r3, #4
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e067      	b.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d76:	d041      	beq.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d78:	f7ff f9a2 	bl	80010c0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d302      	bcc.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d136      	bne.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10c      	bne.n	8001db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4013      	ands	r3, r2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	e00b      	b.n	8001dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	f043 0220 	orr.w	r2, r3, #32
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e021      	b.n	8001e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	0c1b      	lsrs	r3, r3, #16
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10c      	bne.n	8001e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4013      	ands	r3, r2
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	bf14      	ite	ne
 8001e18:	2301      	movne	r3, #1
 8001e1a:	2300      	moveq	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e00b      	b.n	8001e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f47f af6d 	bne.w	8001d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e54:	e034      	b.n	8001ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f886 	bl	8001f68 <I2C_IsAcknowledgeFailed>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e034      	b.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d028      	beq.n	8001ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6e:	f7ff f927 	bl	80010c0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d302      	bcc.n	8001e84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d11d      	bne.n	8001ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8e:	2b80      	cmp	r3, #128	@ 0x80
 8001e90:	d016      	beq.n	8001ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e007      	b.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eca:	2b80      	cmp	r3, #128	@ 0x80
 8001ecc:	d1c3      	bne.n	8001e56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ee4:	e034      	b.n	8001f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f83e 	bl	8001f68 <I2C_IsAcknowledgeFailed>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e034      	b.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d028      	beq.n	8001f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7ff f8df 	bl	80010c0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11d      	bne.n	8001f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d016      	beq.n	8001f50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e007      	b.n	8001f60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d1c3      	bne.n	8001ee6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7e:	d11b      	bne.n	8001fb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f043 0204 	orr.w	r2, r3, #4
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e267      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d075      	beq.n	80020d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fe6:	4b88      	ldr	r3, [pc, #544]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d00c      	beq.n	800200c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b85      	ldr	r3, [pc, #532]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d112      	bne.n	8002024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffe:	4b82      	ldr	r3, [pc, #520]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800200a:	d10b      	bne.n	8002024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	4b7e      	ldr	r3, [pc, #504]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d05b      	beq.n	80020d0 <HAL_RCC_OscConfig+0x108>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d157      	bne.n	80020d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e242      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x74>
 800202e:	4b76      	ldr	r3, [pc, #472]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a75      	ldr	r2, [pc, #468]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e01d      	b.n	8002078 <HAL_RCC_OscConfig+0xb0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002046:	4b70      	ldr	r3, [pc, #448]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6f      	ldr	r2, [pc, #444]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800204c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6c      	ldr	r2, [pc, #432]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e00b      	b.n	8002078 <HAL_RCC_OscConfig+0xb0>
 8002060:	4b69      	ldr	r3, [pc, #420]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a68      	ldr	r2, [pc, #416]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002066:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b66      	ldr	r3, [pc, #408]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a65      	ldr	r2, [pc, #404]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d013      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff f81e 	bl	80010c0 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff f81a 	bl	80010c0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	@ 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e207      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b5b      	ldr	r3, [pc, #364]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f0      	beq.n	8002088 <HAL_RCC_OscConfig+0xc0>
 80020a6:	e014      	b.n	80020d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff f80a 	bl	80010c0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff f806 	bl	80010c0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	@ 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1f3      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c2:	4b51      	ldr	r3, [pc, #324]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0xe8>
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d063      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020de:	4b4a      	ldr	r3, [pc, #296]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d11c      	bne.n	8002130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f6:	4b44      	ldr	r3, [pc, #272]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d116      	bne.n	8002130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_RCC_OscConfig+0x152>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d001      	beq.n	800211a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e1c7      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4937      	ldr	r1, [pc, #220]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	e03a      	b.n	80021a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d020      	beq.n	800217a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002138:	4b34      	ldr	r3, [pc, #208]	@ (800220c <HAL_RCC_OscConfig+0x244>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe ffbf 	bl	80010c0 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe ffbb 	bl	80010c0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e1a8      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002158:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4925      	ldr	r1, [pc, #148]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	4b24      	ldr	r3, [pc, #144]	@ (800220c <HAL_RCC_OscConfig+0x244>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe ff9e 	bl	80010c0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe ff9a 	bl	80010c0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e187      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219a:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d036      	beq.n	8002220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ba:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_RCC_OscConfig+0x248>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe ff7e 	bl	80010c0 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c8:	f7fe ff7a 	bl	80010c0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e167      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021da:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_OscConfig+0x240>)
 80021dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0x200>
 80021e6:	e01b      	b.n	8002220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_OscConfig+0x248>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe ff67 	bl	80010c0 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	e00e      	b.n	8002214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe ff63 	bl	80010c0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d907      	bls.n	8002214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e150      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
 8002208:	40023800 	.word	0x40023800
 800220c:	42470000 	.word	0x42470000
 8002210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ea      	bne.n	80021f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8097 	beq.w	800235c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002232:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10f      	bne.n	800225e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b7d      	ldr	r3, [pc, #500]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	4a7c      	ldr	r2, [pc, #496]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	@ 0x40
 800224e:	4b7a      	ldr	r3, [pc, #488]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	4b77      	ldr	r3, [pc, #476]	@ (800243c <HAL_RCC_OscConfig+0x474>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d118      	bne.n	800229c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226a:	4b74      	ldr	r3, [pc, #464]	@ (800243c <HAL_RCC_OscConfig+0x474>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a73      	ldr	r2, [pc, #460]	@ (800243c <HAL_RCC_OscConfig+0x474>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7fe ff23 	bl	80010c0 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe ff1f 	bl	80010c0 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e10c      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002290:	4b6a      	ldr	r3, [pc, #424]	@ (800243c <HAL_RCC_OscConfig+0x474>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x2ea>
 80022a4:	4b64      	ldr	r3, [pc, #400]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a8:	4a63      	ldr	r2, [pc, #396]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b0:	e01c      	b.n	80022ec <HAL_RCC_OscConfig+0x324>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x30c>
 80022ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	4a5e      	ldr	r2, [pc, #376]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d2:	e00b      	b.n	80022ec <HAL_RCC_OscConfig+0x324>
 80022d4:	4b58      	ldr	r3, [pc, #352]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d8:	4a57      	ldr	r2, [pc, #348]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e0:	4b55      	ldr	r3, [pc, #340]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	4a54      	ldr	r2, [pc, #336]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80022e6:	f023 0304 	bic.w	r3, r3, #4
 80022ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d015      	beq.n	8002320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fee4 	bl	80010c0 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fee0 	bl	80010c0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0cb      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0ee      	beq.n	80022fc <HAL_RCC_OscConfig+0x334>
 800231e:	e014      	b.n	800234a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe fece 	bl	80010c0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe feca 	bl	80010c0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e0b5      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233e:	4b3e      	ldr	r3, [pc, #248]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ee      	bne.n	8002328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234a:	7dfb      	ldrb	r3, [r7, #23]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	4a38      	ldr	r2, [pc, #224]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800235a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a1 	beq.w	80024a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002366:	4b34      	ldr	r3, [pc, #208]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b08      	cmp	r3, #8
 8002370:	d05c      	beq.n	800242c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d141      	bne.n	80023fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <HAL_RCC_OscConfig+0x478>)
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fe9e 	bl	80010c0 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fe9a 	bl	80010c0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e087      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	3b01      	subs	r3, #1
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	491b      	ldr	r1, [pc, #108]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <HAL_RCC_OscConfig+0x478>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe fe73 	bl	80010c0 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fe6f 	bl	80010c0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e05c      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x416>
 80023fc:	e054      	b.n	80024a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_RCC_OscConfig+0x478>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fe5c 	bl	80010c0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fe58 	bl	80010c0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e045      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_RCC_OscConfig+0x470>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x444>
 800242a:	e03d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e038      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000
 8002440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_RCC_OscConfig+0x4ec>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d028      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d121      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d11a      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800247a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800247c:	4293      	cmp	r3, r2
 800247e:	d111      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40023800 	.word	0x40023800

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0cc      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b68      	ldr	r3, [pc, #416]	@ (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d90c      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b65      	ldr	r3, [pc, #404]	@ (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b63      	ldr	r3, [pc, #396]	@ (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b8      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b59      	ldr	r3, [pc, #356]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b53      	ldr	r3, [pc, #332]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a52      	ldr	r2, [pc, #328]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800252e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494d      	ldr	r1, [pc, #308]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d044      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d003      	beq.n	8002576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e067      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b37      	ldr	r3, [pc, #220]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4934      	ldr	r1, [pc, #208]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fd8a 	bl	80010c0 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fd86 	bl	80010c0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e04f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d20c      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e032      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4916      	ldr	r1, [pc, #88]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490e      	ldr	r1, [pc, #56]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f821 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	490a      	ldr	r1, [pc, #40]	@ (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a09      	ldr	r2, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fcea 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00
 8002674:	40023800 	.word	0x40023800
 8002678:	0800299c 	.word	0x0800299c
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002688:	b094      	sub	sp, #80	@ 0x50
 800268a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002690:	2300      	movs	r3, #0
 8002692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002694:	2300      	movs	r3, #0
 8002696:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800269c:	4b79      	ldr	r3, [pc, #484]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x200>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d00d      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x40>
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	f200 80e1 	bhi.w	8002870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x34>
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d003      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x3a>
 80026b6:	e0db      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4b73      	ldr	r3, [pc, #460]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80026bc:	e0db      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026be:	4b73      	ldr	r3, [pc, #460]	@ (800288c <HAL_RCC_GetSysClockFreq+0x208>)
 80026c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026c2:	e0d8      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d063      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026da:	4b6a      	ldr	r3, [pc, #424]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x200>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	2200      	movs	r2, #0
 80026e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ee:	2300      	movs	r3, #0
 80026f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026f6:	4622      	mov	r2, r4
 80026f8:	462b      	mov	r3, r5
 80026fa:	f04f 0000 	mov.w	r0, #0
 80026fe:	f04f 0100 	mov.w	r1, #0
 8002702:	0159      	lsls	r1, r3, #5
 8002704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002708:	0150      	lsls	r0, r2, #5
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4621      	mov	r1, r4
 8002710:	1a51      	subs	r1, r2, r1
 8002712:	6139      	str	r1, [r7, #16]
 8002714:	4629      	mov	r1, r5
 8002716:	eb63 0301 	sbc.w	r3, r3, r1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002728:	4659      	mov	r1, fp
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002732:	4651      	mov	r1, sl
 8002734:	018a      	lsls	r2, r1, #6
 8002736:	4651      	mov	r1, sl
 8002738:	ebb2 0801 	subs.w	r8, r2, r1
 800273c:	4659      	mov	r1, fp
 800273e:	eb63 0901 	sbc.w	r9, r3, r1
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800274e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	4623      	mov	r3, r4
 800275c:	eb18 0303 	adds.w	r3, r8, r3
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	462b      	mov	r3, r5
 8002764:	eb49 0303 	adc.w	r3, r9, r3
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002776:	4629      	mov	r1, r5
 8002778:	024b      	lsls	r3, r1, #9
 800277a:	4621      	mov	r1, r4
 800277c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002780:	4621      	mov	r1, r4
 8002782:	024a      	lsls	r2, r1, #9
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800278a:	2200      	movs	r2, #0
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800278e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002794:	f7fd fd20 	bl	80001d8 <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4613      	mov	r3, r2
 800279e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027a0:	e058      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a2:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	2200      	movs	r2, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	4611      	mov	r1, r2
 80027ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027bc:	4642      	mov	r2, r8
 80027be:	464b      	mov	r3, r9
 80027c0:	f04f 0000 	mov.w	r0, #0
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	0159      	lsls	r1, r3, #5
 80027ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ce:	0150      	lsls	r0, r2, #5
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4641      	mov	r1, r8
 80027d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027da:	4649      	mov	r1, r9
 80027dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027f4:	ebb2 040a 	subs.w	r4, r2, sl
 80027f8:	eb63 050b 	sbc.w	r5, r3, fp
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	00eb      	lsls	r3, r5, #3
 8002806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280a:	00e2      	lsls	r2, r4, #3
 800280c:	4614      	mov	r4, r2
 800280e:	461d      	mov	r5, r3
 8002810:	4643      	mov	r3, r8
 8002812:	18e3      	adds	r3, r4, r3
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	464b      	mov	r3, r9
 8002818:	eb45 0303 	adc.w	r3, r5, r3
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800282a:	4629      	mov	r1, r5
 800282c:	028b      	lsls	r3, r1, #10
 800282e:	4621      	mov	r1, r4
 8002830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002834:	4621      	mov	r1, r4
 8002836:	028a      	lsls	r2, r1, #10
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283e:	2200      	movs	r2, #0
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	61fa      	str	r2, [r7, #28]
 8002844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002848:	f7fd fcc6 	bl	80001d8 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_RCC_GetSysClockFreq+0x200>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002864:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x204>)
 8002872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002878:	4618      	mov	r0, r3
 800287a:	3750      	adds	r7, #80	@ 0x50
 800287c:	46bd      	mov	sp, r7
 800287e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002894:	4b03      	ldr	r3, [pc, #12]	@ (80028a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002896:	681b      	ldr	r3, [r3, #0]
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	20000000 	.word	0x20000000

080028a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ac:	f7ff fff0 	bl	8002890 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0a9b      	lsrs	r3, r3, #10
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4903      	ldr	r1, [pc, #12]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	080029ac 	.word	0x080029ac

080028d0 <memset>:
 80028d0:	4402      	add	r2, r0
 80028d2:	4603      	mov	r3, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	f803 1b01 	strb.w	r1, [r3], #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	@ (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 f818 	bl	8002928 <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	080029bc 	.word	0x080029bc
 800291c:	080029bc 	.word	0x080029bc
 8002920:	080029bc 	.word	0x080029bc
 8002924:	080029c0 	.word	0x080029c0

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
