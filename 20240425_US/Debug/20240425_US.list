
20240425_US.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800572c  0800572c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800572c  0800572c  0000672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005734  08005734  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005734  08005734  00006734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005738  08005738  00006738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800573c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  2000005c  08005798  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005798  00007430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011683  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028cc  00000000  00000000  0001870f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfc  00000000  00000000  0001c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb2  00000000  00000000  0001cd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d3a  00000000  00000000  00033d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091191  00000000  00000000  00048a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9bf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b90  00000000  00000000  000d9c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000de7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005694 	.word	0x08005694

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005694 	.word	0x08005694

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f001 fa2a 	bl	80021b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f812 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f000 fa3c 	bl	80011e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d6c:	f000 f876 	bl	8000e5c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000d70:	f000 fa0e 	bl	8001190 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d74:	f000 f8a0 	bl	8000eb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d78:	f000 f8ee 	bl	8000f58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d7c:	f000 f938 	bl	8000ff0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d80:	f000 f9b8 	bl	80010f4 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  apMain();
 8000d84:	f000 fd94 	bl	80018b0 <apMain>
 8000d88:	e7fc      	b.n	8000d84 <main+0x28>
	...

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	@ 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	2230      	movs	r2, #48	@ 0x30
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fffa 	bl	8004d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	4a26      	ldr	r2, [pc, #152]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemClock_Config+0xc8>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a20      	ldr	r2, [pc, #128]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <SystemClock_Config+0xcc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 f9e5 	bl	80031e0 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e1c:	f000 fab0 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fc47 	bl	80036d0 <HAL_RCC_ClockConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e48:	f000 fa9a 	bl	8001380 <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	@ 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <MX_I2C1_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <MX_I2C1_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_I2C1_Init+0x50>)
 8000e9a:	f001 fd03 	bl	80028a4 <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 fa6c 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000078 	.word	0x20000078
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	000186a0 	.word	0x000186a0

08000eb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f54 <MX_TIM1_Init+0x9c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000edc:	2263      	movs	r2, #99	@ 0x63
 8000ede:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000ee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f00:	4813      	ldr	r0, [pc, #76]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000f02:	f002 fe05 	bl	8003b10 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f0c:	f000 fa38 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000f1e:	f003 f847 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f28:	f000 fa2a 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_TIM1_Init+0x98>)
 8000f3a:	f003 fbd9 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f44:	f000 fa1c 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000cc 	.word	0x200000cc
 8000f54:	40010000 	.word	0x40010000

08000f58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f7e:	2263      	movs	r2, #99	@ 0x63
 8000f80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000f9e:	f002 fdb7 	bl	8003b10 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa8:	f000 f9ea 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000fba:	f002 fff9 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc4:	f000 f9dc 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_TIM2_Init+0x94>)
 8000fd6:	f003 fb8b 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f000 f9ce 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000114 	.word	0x20000114

08000ff0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	@ 0x38
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	f107 0320 	add.w	r3, r7, #32
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
 800101c:	615a      	str	r2, [r3, #20]
 800101e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001020:	4b32      	ldr	r3, [pc, #200]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001022:	4a33      	ldr	r2, [pc, #204]	@ (80010f0 <MX_TIM3_Init+0x100>)
 8001024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001026:	4b31      	ldr	r3, [pc, #196]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001028:	2263      	movs	r2, #99	@ 0x63
 800102a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <MX_TIM3_Init+0xfc>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001032:	4b2e      	ldr	r3, [pc, #184]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001034:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001038:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <MX_TIM3_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001046:	4829      	ldr	r0, [pc, #164]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001048:	f002 fd62 	bl	8003b10 <HAL_TIM_Base_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001052:	f000 f995 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001060:	4619      	mov	r1, r3
 8001062:	4822      	ldr	r0, [pc, #136]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001064:	f002 ffa4 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800106e:	f000 f987 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001072:	481e      	ldr	r0, [pc, #120]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001074:	f002 fe1d 	bl	8003cb2 <HAL_TIM_PWM_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800107e:	f000 f97f 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	4619      	mov	r1, r3
 8001090:	4816      	ldr	r0, [pc, #88]	@ (80010ec <MX_TIM3_Init+0xfc>)
 8001092:	f003 fb2d 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800109c:	f000 f970 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	@ 0x60
 80010a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_TIM3_Init+0xfc>)
 80010b8:	f002 feb8 	bl	8003e2c <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010c2:	f000 f95d 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2204      	movs	r2, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <MX_TIM3_Init+0xfc>)
 80010ce:	f002 fead 	bl	8003e2c <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80010d8:	f000 f952 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <MX_TIM3_Init+0xfc>)
 80010de:	f000 fa27 	bl	8001530 <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3738      	adds	r7, #56	@ 0x38
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000015c 	.word	0x2000015c
 80010f0:	40000400 	.word	0x40000400

080010f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001112:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <MX_TIM4_Init+0x98>)
 8001114:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001118:	2263      	movs	r2, #99	@ 0x63
 800111a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_TIM4_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001124:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001128:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_TIM4_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001136:	4814      	ldr	r0, [pc, #80]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001138:	f002 fcea 	bl	8003b10 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f91d 	bl	8001380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001154:	f002 ff2c 	bl	8003fb0 <HAL_TIM_ConfigClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800115e:	f000 f90f 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <MX_TIM4_Init+0x94>)
 8001170:	f003 fabe 	bl	80046f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800117a:	f000 f901 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001a4 	.word	0x200001a4
 800118c:	40000800 	.word	0x40000800

08001190 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f003 fb00 	bl	80047cc <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f8d5 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001ec 	.word	0x200001ec
 80011e0:	40004400 	.word	0x40004400

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a5b      	ldr	r2, [pc, #364]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b59      	ldr	r3, [pc, #356]	@ (8001370 <MX_GPIO_Init+0x18c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <MX_GPIO_Init+0x18c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a54      	ldr	r2, [pc, #336]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b52      	ldr	r3, [pc, #328]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a4d      	ldr	r2, [pc, #308]	@ (8001370 <MX_GPIO_Init+0x18c>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b4b      	ldr	r3, [pc, #300]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b44      	ldr	r3, [pc, #272]	@ (8001370 <MX_GPIO_Init+0x18c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FORWARD_T_Pin|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800126a:	2200      	movs	r2, #0
 800126c:	f240 11e5 	movw	r1, #485	@ 0x1e5
 8001270:	4840      	ldr	r0, [pc, #256]	@ (8001374 <MX_GPIO_Init+0x190>)
 8001272:	f001 fae5 	bl	8002840 <HAL_GPIO_WritePin>
                          |IN_A1_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|IN_B2_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f240 4101 	movw	r1, #1025	@ 0x401
 800127c:	483e      	ldr	r0, [pc, #248]	@ (8001378 <MX_GPIO_Init+0x194>)
 800127e:	f001 fadf 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN_B1_Pin|IN_A2_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001288:	483c      	ldr	r0, [pc, #240]	@ (800137c <MX_GPIO_Init+0x198>)
 800128a:	f001 fad9 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FORWARD_T_Pin PC2 PC5 PC6
                           IN_A1_Pin PC8 */
  GPIO_InitStruct.Pin = FORWARD_T_Pin|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800128e:	f240 13e5 	movw	r3, #485	@ 0x1e5
 8001292:	617b      	str	r3, [r7, #20]
                          |IN_A1_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4833      	ldr	r0, [pc, #204]	@ (8001374 <MX_GPIO_Init+0x190>)
 80012a8:	f001 f92e 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : FORWARD_E_Pin PC3 */
  GPIO_InitStruct.Pin = FORWARD_E_Pin|GPIO_PIN_3;
 80012ac:	230a      	movs	r3, #10
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012b0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	482c      	ldr	r0, [pc, #176]	@ (8001374 <MX_GPIO_Init+0x190>)
 80012c2:	f001 f921 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012ca:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4828      	ldr	r0, [pc, #160]	@ (800137c <MX_GPIO_Init+0x198>)
 80012dc:	f001 f914 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 IN_B2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|IN_B2_Pin;
 80012e0:	f240 4301 	movw	r3, #1025	@ 0x401
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481f      	ldr	r0, [pc, #124]	@ (8001378 <MX_GPIO_Init+0x194>)
 80012fa:	f001 f905 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_B1_Pin IN_A2_Pin */
  GPIO_InitStruct.Pin = IN_B1_Pin|IN_A2_Pin;
 80012fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4819      	ldr	r0, [pc, #100]	@ (800137c <MX_GPIO_Init+0x198>)
 8001318:	f001 f8f6 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800131c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4810      	ldr	r0, [pc, #64]	@ (8001374 <MX_GPIO_Init+0x190>)
 8001332:	f001 f8e9 	bl	8002508 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2007      	movs	r0, #7
 800133c:	f001 f8ad 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001340:	2007      	movs	r0, #7
 8001342:	f001 f8c6 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2009      	movs	r0, #9
 800134c:	f001 f8a5 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001350:	2009      	movs	r0, #9
 8001352:	f001 f8be 	bl	80024d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	200a      	movs	r0, #10
 800135c:	f001 f89d 	bl	800249a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001360:	200a      	movs	r0, #10
 8001362:	f001 f8b6 	bl	80024d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40020800 	.word	0x40020800
 8001378:	40020400 	.word	0x40020400
 800137c:	40020000 	.word	0x40020000

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <Error_Handler+0x8>

0800138c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a19      	ldr	r2, [pc, #100]	@ (8001460 <HAL_I2C_MspInit+0x84>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d12c      	bne.n	8001458 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <HAL_I2C_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <HAL_I2C_MspInit+0x88>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_I2C_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001420:	2312      	movs	r3, #18
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142c:	2304      	movs	r3, #4
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	480c      	ldr	r0, [pc, #48]	@ (8001468 <HAL_I2C_MspInit+0x8c>)
 8001438:	f001 f866 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_I2C_MspInit+0x88>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <HAL_I2C_MspInit+0x88>)
 8001446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800144a:	6413      	str	r3, [r2, #64]	@ 0x40
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_I2C_MspInit+0x88>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	@ 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40005400 	.word	0x40005400
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a29      	ldr	r2, [pc, #164]	@ (8001520 <HAL_TIM_Base_MspInit+0xb4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d10e      	bne.n	800149c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800149a:	e03a      	b.n	8001512 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014a4:	d10e      	bne.n	80014c4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
}
 80014c2:	e026      	b.n	8001512 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a17      	ldr	r2, [pc, #92]	@ (8001528 <HAL_TIM_Base_MspInit+0xbc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d10e      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
}
 80014ea:	e012      	b.n	8001512 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <HAL_TIM_Base_MspInit+0xc0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d10d      	bne.n	8001512 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6413      	str	r3, [r2, #64]	@ 0x40
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <HAL_TIM_Base_MspInit+0xb8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
}
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40010000 	.word	0x40010000
 8001524:	40023800 	.word	0x40023800
 8001528:	40000400 	.word	0x40000400
 800152c:	40000800 	.word	0x40000800

08001530 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a12      	ldr	r2, [pc, #72]	@ (8001598 <HAL_TIM_MspPostInit+0x68>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d11d      	bne.n	800158e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_TIM_MspPostInit+0x6c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <HAL_TIM_MspPostInit+0x6c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_TIM_MspPostInit+0x6c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800156e:	23c0      	movs	r3, #192	@ 0xc0
 8001570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800157e:	2302      	movs	r3, #2
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <HAL_TIM_MspPostInit+0x70>)
 800158a:	f000 ffbd 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40000400 	.word	0x40000400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	@ 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_UART_MspInit+0x8c>)
 800161a:	f000 ff75 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40004400 	.word	0x40004400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <NMI_Handler+0x4>

0800163c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <MemManage_Handler+0x4>

0800164c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <UsageFault_Handler+0x4>

0800165c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168a:	f000 fde7 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FORWARD_E_Pin);
 8001696:	2002      	movs	r0, #2
 8001698:	f001 f8ec 	bl	8002874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016a4:	2008      	movs	r0, #8
 80016a6:	f001 f8e5 	bl	8002874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}

080016ae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80016b2:	2010      	movs	r0, #16
 80016b4:	f001 f8de 	bl	8002874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f003 fb5a 	bl	8004da4 <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	@ (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20020000 	.word	0x20020000
 800171c:	00000400 	.word	0x00000400
 8001720:	20000234 	.word	0x20000234
 8001724:	20000430 	.word	0x20000430

08001728 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <SystemInit+0x20>)
 800172e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001732:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <SystemInit+0x20>)
 8001734:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001750:	f7ff ffea 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	@ (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	@ (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f003 fb19 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff faed 	bl	8000d5c <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001790:	0800573c 	.word	0x0800573c
  ldr r2, =_sbss
 8001794:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001798:	20000430 	.word	0x20000430

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <sys_init>:

void timeTick(){

}

void sys_init() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af04      	add	r7, sp, #16
	button_init(&button1, GPIOC, GPIO_PIN_10);
 80017a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017aa:	4930      	ldr	r1, [pc, #192]	@ (800186c <sys_init+0xcc>)
 80017ac:	4830      	ldr	r0, [pc, #192]	@ (8001870 <sys_init+0xd0>)
 80017ae:	f000 fc3b 	bl	8002028 <button_init>
	button_init(&button2, GPIOC, GPIO_PIN_11);
 80017b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017b6:	492d      	ldr	r1, [pc, #180]	@ (800186c <sys_init+0xcc>)
 80017b8:	482e      	ldr	r0, [pc, #184]	@ (8001874 <sys_init+0xd4>)
 80017ba:	f000 fc35 	bl	8002028 <button_init>
	button_init(&button3, GPIOC, GPIO_PIN_12);
 80017be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017c2:	492a      	ldr	r1, [pc, #168]	@ (800186c <sys_init+0xcc>)
 80017c4:	482c      	ldr	r0, [pc, #176]	@ (8001878 <sys_init+0xd8>)
 80017c6:	f000 fc2f 	bl	8002028 <button_init>
	led_init(&led1, GPIOC, GPIO_PIN_8);
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	4927      	ldr	r1, [pc, #156]	@ (800186c <sys_init+0xcc>)
 80017d0:	482a      	ldr	r0, [pc, #168]	@ (800187c <sys_init+0xdc>)
 80017d2:	f000 fc70 	bl	80020b6 <led_init>
	led_init(&led2, GPIOC, GPIO_PIN_6);
 80017d6:	2240      	movs	r2, #64	@ 0x40
 80017d8:	4924      	ldr	r1, [pc, #144]	@ (800186c <sys_init+0xcc>)
 80017da:	4829      	ldr	r0, [pc, #164]	@ (8001880 <sys_init+0xe0>)
 80017dc:	f000 fc6b 	bl	80020b6 <led_init>
	led_init(&led3, GPIOC, GPIO_PIN_5);
 80017e0:	2220      	movs	r2, #32
 80017e2:	4922      	ldr	r1, [pc, #136]	@ (800186c <sys_init+0xcc>)
 80017e4:	4827      	ldr	r0, [pc, #156]	@ (8001884 <sys_init+0xe4>)
 80017e6:	f000 fc66 	bl	80020b6 <led_init>
	ultra_init(&sonic1, &htim1, FRONT_GPIO_TRIG, FRONT_GPIO_TRIG_PIN, FRONT_GPIO_ECHO, FRONT_GPIO_ECHO_PIN);
 80017ea:	2302      	movs	r3, #2
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	4b1f      	ldr	r3, [pc, #124]	@ (800186c <sys_init+0xcc>)
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	4a1d      	ldr	r2, [pc, #116]	@ (800186c <sys_init+0xcc>)
 80017f6:	4924      	ldr	r1, [pc, #144]	@ (8001888 <sys_init+0xe8>)
 80017f8:	4824      	ldr	r0, [pc, #144]	@ (800188c <sys_init+0xec>)
 80017fa:	f000 faf6 	bl	8001dea <ultra_init>
	ultra_init(&sonic2, &htim1, LEFT_GPIO_TRIG, LEFT_GPIO_TRIG_PIN, LEFT_GPIO_ECHO, LEFT_GPIO_ECHO_PIN);
 80017fe:	2310      	movs	r3, #16
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <sys_init+0xf0>)
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <sys_init+0xf4>)
 800180a:	491f      	ldr	r1, [pc, #124]	@ (8001888 <sys_init+0xe8>)
 800180c:	4822      	ldr	r0, [pc, #136]	@ (8001898 <sys_init+0xf8>)
 800180e:	f000 faec 	bl	8001dea <ultra_init>
	ultra_init(&sonic3, &htim4, RIGHT_GPIO_TRIG, RIGHT_GPIO_TRIG_PIN, RIGHT_GPIO_ECHO, RIGHT_GPIO_ECHO_PIN);
 8001812:	2308      	movs	r3, #8
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	4b15      	ldr	r3, [pc, #84]	@ (800186c <sys_init+0xcc>)
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2304      	movs	r3, #4
 800181c:	4a13      	ldr	r2, [pc, #76]	@ (800186c <sys_init+0xcc>)
 800181e:	491f      	ldr	r1, [pc, #124]	@ (800189c <sys_init+0xfc>)
 8001820:	481f      	ldr	r0, [pc, #124]	@ (80018a0 <sys_init+0x100>)
 8001822:	f000 fae2 	bl	8001dea <ultra_init>

	Motor_init(&motorL, &htim3, TIM_CHANNEL_1, LEFT_DIR1_GPIO, LEFT_DIR1_GPIO_Pin, LEFT_DIR2_GPIO, LEFT_DIR2_GPIO_Pin);
 8001826:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800182a:	9302      	str	r3, [sp, #8]
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <sys_init+0xf0>)
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4b0d      	ldr	r3, [pc, #52]	@ (800186c <sys_init+0xcc>)
 8001836:	2200      	movs	r2, #0
 8001838:	491a      	ldr	r1, [pc, #104]	@ (80018a4 <sys_init+0x104>)
 800183a:	481b      	ldr	r0, [pc, #108]	@ (80018a8 <sys_init+0x108>)
 800183c:	f000 fc5e 	bl	80020fc <Motor_init>
	Motor_init(&motorR, &htim3, TIM_CHANNEL_2, RIGHT_DIR1_GPIO, RIGHT_DIR1_GPIO_Pin, RIGHT_DIR2_GPIO, RIGHT_DIR2_GPIO_Pin);
 8001840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <sys_init+0xf4>)
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <sys_init+0xf0>)
 8001852:	2204      	movs	r2, #4
 8001854:	4913      	ldr	r1, [pc, #76]	@ (80018a4 <sys_init+0x104>)
 8001856:	4815      	ldr	r0, [pc, #84]	@ (80018ac <sys_init+0x10c>)
 8001858:	f000 fc50 	bl	80020fc <Motor_init>

	LCD_init();
 800185c:	f000 f950 	bl	8001b00 <LCD_init>
	DelayInit();
 8001860:	f000 f8de 	bl	8001a20 <DelayInit>
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020800 	.word	0x40020800
 8001870:	20000238 	.word	0x20000238
 8001874:	20000244 	.word	0x20000244
 8001878:	20000250 	.word	0x20000250
 800187c:	2000025c 	.word	0x2000025c
 8001880:	20000264 	.word	0x20000264
 8001884:	2000026c 	.word	0x2000026c
 8001888:	200000cc 	.word	0x200000cc
 800188c:	20000274 	.word	0x20000274
 8001890:	40020000 	.word	0x40020000
 8001894:	40020400 	.word	0x40020400
 8001898:	20000288 	.word	0x20000288
 800189c:	200001a4 	.word	0x200001a4
 80018a0:	2000029c 	.word	0x2000029c
 80018a4:	2000015c 	.word	0x2000015c
 80018a8:	200002b0 	.word	0x200002b0
 80018ac:	200002c8 	.word	0x200002c8

080018b0 <apMain>:

int apMain() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	@ 0x38
 80018b4:	af00      	add	r7, sp, #0

	sys_init();
 80018b6:	f7ff ff73 	bl	80017a0 <sys_init>
	LCD_gotoXY(0, 0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 fa42 	bl	8001d46 <LCD_gotoXY>
	LCD_writeString("Hello STM32!!");
 80018c2:	4839      	ldr	r0, [pc, #228]	@ (80019a8 <apMain+0xf8>)
 80018c4:	f000 fa60 	bl	8001d88 <LCD_writeString>
	LCD_writeStringXY(1, 0, "Power On State");
 80018c8:	4a38      	ldr	r2, [pc, #224]	@ (80019ac <apMain+0xfc>)
 80018ca:	2100      	movs	r1, #0
 80018cc:	2001      	movs	r0, #1
 80018ce:	f000 fa77 	bl	8001dc0 <LCD_writeStringXY>

	Motor_setSpeed(&motorL, 800);
 80018d2:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80018d6:	4836      	ldr	r0, [pc, #216]	@ (80019b0 <apMain+0x100>)
 80018d8:	f000 fc3f 	bl	800215a <Motor_setSpeed>
	Motor_setSpeed(&motorR, 800);
 80018dc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80018e0:	4834      	ldr	r0, [pc, #208]	@ (80019b4 <apMain+0x104>)
 80018e2:	f000 fc3a 	bl	800215a <Motor_setSpeed>
	Motor_stop(&motorL);
 80018e6:	4832      	ldr	r0, [pc, #200]	@ (80019b0 <apMain+0x100>)
 80018e8:	f000 fc27 	bl	800213a <Motor_stop>
	Motor_stop(&motorR);
 80018ec:	4831      	ldr	r0, [pc, #196]	@ (80019b4 <apMain+0x104>)
 80018ee:	f000 fc24 	bl	800213a <Motor_stop>
		Motor_stop(&motorR);

		HAL_Delay(1000);*/


		if (button_getState(&button1) == ACT_RELEASED) {
 80018f2:	4831      	ldr	r0, [pc, #196]	@ (80019b8 <apMain+0x108>)
 80018f4:	f000 fbae 	bl	8002054 <button_getState>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d117      	bne.n	800192e <apMain+0x7e>
			distance = UltraSonic_getDistance(&sonic1);
 80018fe:	482f      	ldr	r0, [pc, #188]	@ (80019bc <apMain+0x10c>)
 8001900:	f000 fb4e 	bl	8001fa0 <UltraSonic_getDistance>
 8001904:	4603      	mov	r3, r0
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b2d      	ldr	r3, [pc, #180]	@ (80019c0 <apMain+0x110>)
 800190a:	701a      	strb	r2, [r3, #0]
			sprintf(buff, "dist: %dcm      ", distance);
 800190c:	4b2c      	ldr	r3, [pc, #176]	@ (80019c0 <apMain+0x110>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	492b      	ldr	r1, [pc, #172]	@ (80019c4 <apMain+0x114>)
 8001916:	4618      	mov	r0, r3
 8001918:	f003 fa1c 	bl	8004d54 <siprintf>
			LCD_writeStringXY(1, 0, buff);
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	461a      	mov	r2, r3
 8001920:	2100      	movs	r1, #0
 8001922:	2001      	movs	r0, #1
 8001924:	f000 fa4c 	bl	8001dc0 <LCD_writeStringXY>
			led_on(&led1);
 8001928:	4827      	ldr	r0, [pc, #156]	@ (80019c8 <apMain+0x118>)
 800192a:	f000 fbd7 	bl	80020dc <led_on>
		}
		if (button_getState(&button2) == ACT_RELEASED) {
 800192e:	4827      	ldr	r0, [pc, #156]	@ (80019cc <apMain+0x11c>)
 8001930:	f000 fb90 	bl	8002054 <button_getState>
 8001934:	4603      	mov	r3, r0
 8001936:	2b04      	cmp	r3, #4
 8001938:	d117      	bne.n	800196a <apMain+0xba>
			distance = UltraSonic_getDistance(&sonic2);
 800193a:	4825      	ldr	r0, [pc, #148]	@ (80019d0 <apMain+0x120>)
 800193c:	f000 fb30 	bl	8001fa0 <UltraSonic_getDistance>
 8001940:	4603      	mov	r3, r0
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b1e      	ldr	r3, [pc, #120]	@ (80019c0 <apMain+0x110>)
 8001946:	701a      	strb	r2, [r3, #0]
			sprintf(buff, "dist: %dcm      ", distance);
 8001948:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <apMain+0x110>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	491c      	ldr	r1, [pc, #112]	@ (80019c4 <apMain+0x114>)
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f9fe 	bl	8004d54 <siprintf>
			LCD_writeStringXY(1, 0, buff);
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	461a      	mov	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	2001      	movs	r0, #1
 8001960:	f000 fa2e 	bl	8001dc0 <LCD_writeStringXY>
			led_on(&led2);
 8001964:	481b      	ldr	r0, [pc, #108]	@ (80019d4 <apMain+0x124>)
 8001966:	f000 fbb9 	bl	80020dc <led_on>
		}
		if (button_getState(&button3) == ACT_RELEASED) {
 800196a:	481b      	ldr	r0, [pc, #108]	@ (80019d8 <apMain+0x128>)
 800196c:	f000 fb72 	bl	8002054 <button_getState>
 8001970:	4603      	mov	r3, r0
 8001972:	2b04      	cmp	r3, #4
 8001974:	d1bd      	bne.n	80018f2 <apMain+0x42>
			distance = UltraSonic_getDistance(&sonic3);
 8001976:	4819      	ldr	r0, [pc, #100]	@ (80019dc <apMain+0x12c>)
 8001978:	f000 fb12 	bl	8001fa0 <UltraSonic_getDistance>
 800197c:	4603      	mov	r3, r0
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <apMain+0x110>)
 8001982:	701a      	strb	r2, [r3, #0]
			sprintf(buff, "dist: %dcm      ", distance);
 8001984:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <apMain+0x110>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	490d      	ldr	r1, [pc, #52]	@ (80019c4 <apMain+0x114>)
 800198e:	4618      	mov	r0, r3
 8001990:	f003 f9e0 	bl	8004d54 <siprintf>
			LCD_writeStringXY(1, 0, buff);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	461a      	mov	r2, r3
 8001998:	2100      	movs	r1, #0
 800199a:	2001      	movs	r0, #1
 800199c:	f000 fa10 	bl	8001dc0 <LCD_writeStringXY>
			led_on(&led3);
 80019a0:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <apMain+0x130>)
 80019a2:	f000 fb9b 	bl	80020dc <led_on>
		if (button_getState(&button1) == ACT_RELEASED) {
 80019a6:	e7a4      	b.n	80018f2 <apMain+0x42>
 80019a8:	080056ac 	.word	0x080056ac
 80019ac:	080056bc 	.word	0x080056bc
 80019b0:	200002b0 	.word	0x200002b0
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	20000238 	.word	0x20000238
 80019bc:	20000274 	.word	0x20000274
 80019c0:	200002e0 	.word	0x200002e0
 80019c4:	080056cc 	.word	0x080056cc
 80019c8:	2000025c 	.word	0x2000025c
 80019cc:	20000244 	.word	0x20000244
 80019d0:	20000288 	.word	0x20000288
 80019d4:	20000264 	.word	0x20000264
 80019d8:	20000250 	.word	0x20000250
 80019dc:	2000029c 	.word	0x2000029c
 80019e0:	2000026c 	.word	0x2000026c

080019e4 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
	UltraSonic_ISR_Process(GPIO_Pin, &sonic1);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4908      	ldr	r1, [pc, #32]	@ (8001a14 <HAL_GPIO_EXTI_Callback+0x30>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 fa8a 	bl	8001f0c <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(GPIO_Pin, &sonic2);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4907      	ldr	r1, [pc, #28]	@ (8001a18 <HAL_GPIO_EXTI_Callback+0x34>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fa85 	bl	8001f0c <UltraSonic_ISR_Process>
	UltraSonic_ISR_Process(GPIO_Pin, &sonic3);
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4905      	ldr	r1, [pc, #20]	@ (8001a1c <HAL_GPIO_EXTI_Callback+0x38>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fa80 	bl	8001f0c <UltraSonic_ISR_Process>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000274 	.word	0x20000274
 8001a18:	20000288 	.word	0x20000288
 8001a1c:	2000029c 	.word	0x2000029c

08001a20 <DelayInit>:
 *      Author: kccistc
 */

#include "delayus.h"

void DelayInit(void) {
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
   CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <DelayInit+0x4c>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <DelayInit+0x4c>)
 8001a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	60d3      	str	r3, [r2, #12]
   CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <DelayInit+0x4c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <DelayInit+0x4c>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3a:	60d3      	str	r3, [r2, #12]

   DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <DelayInit+0x50>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <DelayInit+0x50>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6013      	str	r3, [r2, #0]
   DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <DelayInit+0x50>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a08      	ldr	r2, [pc, #32]	@ (8001a70 <DelayInit+0x50>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

   DWT->CYCCNT = 0;
 8001a54:	4b06      	ldr	r3, [pc, #24]	@ (8001a70 <DelayInit+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]

   /* 3 NO OPERATION instructions */
   __ASM volatile ("NOP");
 8001a5a:	bf00      	nop
   __ASM volatile ("NOP");
 8001a5c:	bf00      	nop
   __ASM volatile ("NOP");
 8001a5e:	bf00      	nop
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000edf0 	.word	0xe000edf0
 8001a70:	e0001000 	.word	0xe0001000

08001a74 <DelayUS>:

void DelayUS(uint32_t us) {
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
   uint32_t cycles = (SystemCoreClock / 1000000L) * us;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <DelayUS+0x44>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <DelayUS+0x48>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9a      	lsrs	r2, r3, #18
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	fb02 f303 	mul.w	r3, r2, r3
 8001a8e:	617b      	str	r3, [r7, #20]
   uint32_t start = DWT->CYCCNT;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <DelayUS+0x4c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	613b      	str	r3, [r7, #16]
   volatile uint32_t cnt;

   do {
      cnt = DWT->CYCCNT - start;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <DelayUS+0x4c>)
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
   } while (cnt < cycles);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f6      	bhi.n	8001a96 <DelayUS+0x22>
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	431bde83 	.word	0x431bde83
 8001ac0:	e0001000 	.word	0xe0001000

08001ac4 <LCD_delay>:


extern I2C_HandleTypeDef hi2c1;
uint8_t lcdData = 0;

void LCD_delay(uint32_t Delay){
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fbe5 	bl	800229c <HAL_Delay>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <LCD_backLightOn>:

void LCD_backLightOn(){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_BACKLIGHT);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <LCD_backLightOn+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <LCD_backLightOn+0x20>)
 8001aec:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8001aee:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <LCD_backLightOn+0x20>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f000 f832 	bl	8001b5c <LCD_sendData>
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200002e1 	.word	0x200002e1

08001b00 <LCD_init>:

void LCD_init(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	LCD_delay(15);
 8001b04:	200f      	movs	r0, #15
 8001b06:	f7ff ffdd 	bl	8001ac4 <LCD_delay>
	LCD_cmdMode();
 8001b0a:	f000 f83b 	bl	8001b84 <LCD_cmdMode>
	LCD_writeMode();
 8001b0e:	f000 f859 	bl	8001bc4 <LCD_writeMode>
	LCD_sendHighNibble(0x30);
 8001b12:	2030      	movs	r0, #48	@ 0x30
 8001b14:	f000 f886 	bl	8001c24 <LCD_sendHighNibble>
	LCD_delay(5);
 8001b18:	2005      	movs	r0, #5
 8001b1a:	f7ff ffd3 	bl	8001ac4 <LCD_delay>
	LCD_sendHighNibble(0x30);
 8001b1e:	2030      	movs	r0, #48	@ 0x30
 8001b20:	f000 f880 	bl	8001c24 <LCD_sendHighNibble>
	LCD_delay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f7ff ffcd 	bl	8001ac4 <LCD_delay>
	LCD_sendHighNibble(0x30);
 8001b2a:	2030      	movs	r0, #48	@ 0x30
 8001b2c:	f000 f87a 	bl	8001c24 <LCD_sendHighNibble>
	LCD_sendHighNibble(0x20);
 8001b30:	2020      	movs	r0, #32
 8001b32:	f000 f877 	bl	8001c24 <LCD_sendHighNibble>
	LCD_sendByte(LCD_4BIT_FUNCTION_SET); //function set
 8001b36:	2028      	movs	r0, #40	@ 0x28
 8001b38:	f000 f8d2 	bl	8001ce0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_OFF); //display off
 8001b3c:	2008      	movs	r0, #8
 8001b3e:	f000 f8cf 	bl	8001ce0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_CLEAR); //display clear
 8001b42:	2001      	movs	r0, #1
 8001b44:	f000 f8cc 	bl	8001ce0 <LCD_sendByte>
	LCD_sendByte(LCD_ENTRY_MODE_SET); //Entry mode set
 8001b48:	2006      	movs	r0, #6
 8001b4a:	f000 f8c9 	bl	8001ce0 <LCD_sendByte>
	LCD_sendByte(LCD_DISPLAY_ON);
 8001b4e:	200c      	movs	r0, #12
 8001b50:	f000 f8c6 	bl	8001ce0 <LCD_sendByte>
	LCD_backLightOn();
 8001b54:	f7ff ffc2 	bl	8001adc <LCD_backLightOn>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_sendData>:


void LCD_sendData(uint8_t data){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, lcdDevAddr_w, &data, 1, 1000);
 8001b66:	1dfa      	adds	r2, r7, #7
 8001b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	214e      	movs	r1, #78	@ 0x4e
 8001b72:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <LCD_sendData+0x24>)
 8001b74:	f000 ffda 	bl	8002b2c <HAL_I2C_Master_Transmit>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000078 	.word	0x20000078

08001b84 <LCD_cmdMode>:

void LCD_cmdMode(){
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RS);
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <LCD_cmdMode+0x1c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <LCD_cmdMode+0x1c>)
 8001b94:	701a      	strb	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	200002e1 	.word	0x200002e1

08001ba4 <LCD_charMode>:
void LCD_charMode(){
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_RS);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <LCD_charMode+0x1c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <LCD_charMode+0x1c>)
 8001bb4:	701a      	strb	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	200002e1 	.word	0x200002e1

08001bc4 <LCD_writeMode>:
void LCD_writeMode(){
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_RW);
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <LCD_writeMode+0x1c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f023 0302 	bic.w	r3, r3, #2
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <LCD_writeMode+0x1c>)
 8001bd4:	701a      	strb	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	200002e1 	.word	0x200002e1

08001be4 <LCD_E_High>:
void LCD_E_High(){
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
	lcdData |= (1<<LCD_E);
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <LCD_E_High+0x1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <LCD_E_High+0x1c>)
 8001bf4:	701a      	strb	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	200002e1 	.word	0x200002e1

08001c04 <LCD_E_Low>:
void LCD_E_Low(){
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	lcdData &= ~(1<<LCD_E);
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <LCD_E_Low+0x1c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f023 0304 	bic.w	r3, r3, #4
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <LCD_E_Low+0x1c>)
 8001c14:	701a      	strb	r2, [r3, #0]
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	200002e1 	.word	0x200002e1

08001c24 <LCD_sendHighNibble>:

void LCD_sendHighNibble(uint8_t data){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
	//enable이 falling edge인 지점에서 전송
	LCD_E_High();
 8001c2e:	f7ff ffd9 	bl	8001be4 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | (data & 0xf0);
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <LCD_sendHighNibble+0x5c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	f023 030f 	bic.w	r3, r3, #15
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <LCD_sendHighNibble+0x5c>)
 8001c50:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <LCD_sendHighNibble+0x5c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff80 	bl	8001b5c <LCD_sendData>
	HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 fb1d 	bl	800229c <HAL_Delay>
	LCD_E_Low();
 8001c62:	f7ff ffcf 	bl	8001c04 <LCD_E_Low>
	LCD_sendData(lcdData);
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <LCD_sendHighNibble+0x5c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff76 	bl	8001b5c <LCD_sendData>
	HAL_Delay(1);
 8001c70:	2001      	movs	r0, #1
 8001c72:	f000 fb13 	bl	800229c <HAL_Delay>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200002e1 	.word	0x200002e1

08001c84 <LCD_sendLowNibble>:
void LCD_sendLowNibble(uint8_t data){
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	//enable이 falling edge인 지점에서 전송
	LCD_E_High();
 8001c8e:	f7ff ffa9 	bl	8001be4 <LCD_E_High>
	lcdData = (lcdData & 0x0f) | ((data & 0x0f)<<4);
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <LCD_sendLowNibble+0x58>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	b25a      	sxtb	r2, r3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <LCD_sendLowNibble+0x58>)
 8001cac:	701a      	strb	r2, [r3, #0]
	LCD_sendData(lcdData);
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <LCD_sendLowNibble+0x58>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff ff52 	bl	8001b5c <LCD_sendData>
	HAL_Delay(1);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f000 faef 	bl	800229c <HAL_Delay>
	LCD_E_Low();
 8001cbe:	f7ff ffa1 	bl	8001c04 <LCD_E_Low>
	LCD_sendData(lcdData);
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <LCD_sendLowNibble+0x58>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff48 	bl	8001b5c <LCD_sendData>
	HAL_Delay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f000 fae5 	bl	800229c <HAL_Delay>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200002e1 	.word	0x200002e1

08001ce0 <LCD_sendByte>:


void LCD_sendByte(uint8_t data) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	LCD_sendHighNibble(data); // D7~D4
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff99 	bl	8001c24 <LCD_sendHighNibble>
	LCD_sendLowNibble(data); // D3~D0
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ffc5 	bl	8001c84 <LCD_sendLowNibble>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <LCD_writeCmdData>:

void LCD_writeCmdData(uint8_t data) {
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	71fb      	strb	r3, [r7, #7]
	LCD_cmdMode();
 8001d0c:	f7ff ff3a 	bl	8001b84 <LCD_cmdMode>
	LCD_writeMode();
 8001d10:	f7ff ff58 	bl	8001bc4 <LCD_writeMode>
	LCD_sendByte(data);
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ffe2 	bl	8001ce0 <LCD_sendByte>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LCD_writeCharData>:
void LCD_writeCharData(uint8_t data) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
	LCD_charMode();
 8001d2e:	f7ff ff39 	bl	8001ba4 <LCD_charMode>
	LCD_writeMode();
 8001d32:	f7ff ff47 	bl	8001bc4 <LCD_writeMode>
	LCD_sendByte(data);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ffd1 	bl	8001ce0 <LCD_sendByte>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col){
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460a      	mov	r2, r1
 8001d50:	71fb      	strb	r3, [r7, #7]
 8001d52:	4613      	mov	r3, r2
 8001d54:	71bb      	strb	r3, [r7, #6]
	col %= 16;
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	71bb      	strb	r3, [r7, #6]
	row %= 2;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	71fb      	strb	r3, [r7, #7]

	uint8_t lcdRegAddr = (0x40 * row) + col;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	019b      	lsls	r3, r3, #6
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	4413      	add	r3, r2
 8001d70:	73fb      	strb	r3, [r7, #15]
	uint8_t command = 0x80 + lcdRegAddr;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	3b80      	subs	r3, #128	@ 0x80
 8001d76:	73bb      	strb	r3, [r7, #14]
	LCD_writeCmdData(command);
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ffc1 	bl	8001d02 <LCD_writeCmdData>

}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LCD_writeString>:

void LCD_writeString(char *str){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	for (int i=0; str[i]; i++){
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e009      	b.n	8001daa <LCD_writeString+0x22>
		LCD_writeCharData(str[i]);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ffc0 	bl	8001d24 <LCD_writeCharData>
	for (int i=0; str[i]; i++){
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ef      	bne.n	8001d96 <LCD_writeString+0xe>
	}
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <LCD_writeStringXY>:

void LCD_writeStringXY(uint8_t row, uint8_t col, char *str){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	603a      	str	r2, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	71bb      	strb	r3, [r7, #6]
	LCD_gotoXY(row, col);
 8001dd0:	79ba      	ldrb	r2, [r7, #6]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ffb5 	bl	8001d46 <LCD_gotoXY>
	LCD_writeString(str);
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7ff ffd3 	bl	8001d88 <LCD_writeString>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <ultra_init>:
		ultra_t *ultra,
		TIM_HandleTypeDef *hTim,
		GPIO_TypeDef* GPIOxT,
		uint16_t GPIO_PinT,
		GPIO_TypeDef* GPIOxE,
		uint16_t GPIO_PinE){
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	807b      	strh	r3, [r7, #2]
	ultra->hTim = hTim;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	601a      	str	r2, [r3, #0]
	ultra->GPIOx_Trig = GPIOxT;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]
	ultra->GPIOx_Echo = GPIOxE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	609a      	str	r2, [r3, #8]
	ultra->GPIO_Pin_Trig = GPIO_PinT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	887a      	ldrh	r2, [r7, #2]
 8001e0e:	819a      	strh	r2, [r3, #12]
	ultra->GPIO_Pin_Echo = GPIO_PinE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8bba      	ldrh	r2, [r7, #28]
 8001e14:	81da      	strh	r2, [r3, #14]
	ultra->tim_counter = 0;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	821a      	strh	r2, [r3, #16]
	ultra->echoflag = 0;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	749a      	strb	r2, [r3, #18]
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <UltraSonic_isCmpltRecvEcho>:

uint16_t tim_counter;

int echoFlag = 0;

int UltraSonic_isCmpltRecvEcho(ultra_t *sonic) {
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
   return sonic->echoflag;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7c9b      	ldrb	r3, [r3, #18]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <UltraSonic_clearEchoFlag>:
void UltraSonic_clearEchoFlag(ultra_t *sonic) {
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	sonic->echoflag = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	749a      	strb	r2, [r3, #18]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <UltraSonic_setEchoFlag>:
void UltraSonic_setEchoFlag(ultra_t *sonic) {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	sonic->echoflag = 1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	749a      	strb	r2, [r3, #18]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <UltraSonic_getEchopinState>:

int UltraSonic_getEchopinState(ultra_t *sonic){
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
   return HAL_GPIO_ReadPin(sonic->GPIOx_Echo, sonic->GPIO_Pin_Echo);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	89db      	ldrh	r3, [r3, #14]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f000 fcbf 	bl	8002810 <HAL_GPIO_ReadPin>
 8001e92:	4603      	mov	r3, r0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <UltraSonic_clearTimer>:
void UltraSonic_clearTimer(ultra_t *sonic) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(sonic->hTim, 0);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <UltraSonic_startTimer>:
void UltraSonic_startTimer(ultra_t *sonic) {
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   HAL_TIM_Base_Start(sonic->hTim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 fe72 	bl	8003bb0 <HAL_TIM_Base_Start>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <UltraSonic_stopTimer>:
void UltraSonic_stopTimer(ultra_t *sonic) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
   HAL_TIM_Base_Stop(sonic->hTim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 febf 	bl	8003c64 <HAL_TIM_Base_Stop>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <UltraSonic_getTimerCounter>:

uint16_t UltraSonic_getTimerCounter(ultra_t *sonic) {
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return __HAL_TIM_GET_COUNTER(sonic->hTim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	b29b      	uxth	r3, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <UltraSonic_ISR_Process>:

void UltraSonic_ISR_Process(uint16_t GPIO_Pin, ultra_t *sonic) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	80fb      	strh	r3, [r7, #6]
   if (GPIO_Pin == sonic->GPIO_Pin_Echo) {
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	89db      	ldrh	r3, [r3, #14]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d11c      	bne.n	8001f5c <UltraSonic_ISR_Process+0x50>
      if (UltraSonic_getEchopinState(sonic)) {
 8001f22:	6838      	ldr	r0, [r7, #0]
 8001f24:	f7ff ffa9 	bl	8001e7a <UltraSonic_getEchopinState>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <UltraSonic_ISR_Process+0x36>
         //인터럽트 발생 시 현재 상태가 1이기때문에 상승엣지
         UltraSonic_clearTimer(sonic);
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f7ff ffb4 	bl	8001e9c <UltraSonic_clearTimer>
         UltraSonic_startTimer(sonic);
 8001f34:	6838      	ldr	r0, [r7, #0]
 8001f36:	f7ff ffc0 	bl	8001eba <UltraSonic_startTimer>
         UltraSonic_clearEchoFlag(sonic);
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7ff ff83 	bl	8001e46 <UltraSonic_clearEchoFlag>
         UltraSonic_stopTimer(sonic);
         sonic->tim_counter = UltraSonic_getTimerCounter(sonic);
         UltraSonic_setEchoFlag(sonic);
      }
   }
}
 8001f40:	e00c      	b.n	8001f5c <UltraSonic_ISR_Process+0x50>
         UltraSonic_stopTimer(sonic);
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f7ff ffc6 	bl	8001ed4 <UltraSonic_stopTimer>
         sonic->tim_counter = UltraSonic_getTimerCounter(sonic);
 8001f48:	6838      	ldr	r0, [r7, #0]
 8001f4a:	f7ff ffd0 	bl	8001eee <UltraSonic_getTimerCounter>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	821a      	strh	r2, [r3, #16]
         UltraSonic_setEchoFlag(sonic);
 8001f56:	6838      	ldr	r0, [r7, #0]
 8001f58:	f7ff ff82 	bl	8001e60 <UltraSonic_setEchoFlag>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <UltraSonic_startTrig>:

void UltraSonic_startTrig(ultra_t *sonic) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(sonic->GPIOx_Trig, sonic->GPIO_Pin_Trig, SET);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6858      	ldr	r0, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	899b      	ldrh	r3, [r3, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	4619      	mov	r1, r3
 8001f78:	f000 fc62 	bl	8002840 <HAL_GPIO_WritePin>
   DelayUS(15);
 8001f7c:	200f      	movs	r0, #15
 8001f7e:	f7ff fd79 	bl	8001a74 <DelayUS>
   HAL_GPIO_WritePin(sonic->GPIOx_Trig, sonic->GPIO_Pin_Trig, RESET);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6858      	ldr	r0, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	899b      	ldrh	r3, [r3, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f000 fc57 	bl	8002840 <HAL_GPIO_WritePin>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	0000      	movs	r0, r0
 8001f9c:	0000      	movs	r0, r0
	...

08001fa0 <UltraSonic_getDistance>:

int UltraSonic_getDistance(ultra_t *sonic) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

   int timeout = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]

   UltraSonic_startTrig(sonic);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ffd9 	bl	8001f64 <UltraSonic_startTrig>
   while (!UltraSonic_isCmpltRecvEcho(sonic)) { // echoFlag가 1일때 while문 탈출
 8001fb2:	e00a      	b.n	8001fca <UltraSonic_getDistance+0x2a>
      timeout++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
      if (timeout > 20)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b14      	cmp	r3, #20
 8001fbe:	dd01      	ble.n	8001fc4 <UltraSonic_getDistance+0x24>
         return 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e026      	b.n	8002012 <UltraSonic_getDistance+0x72>
      HAL_Delay(1); //20ms이 넘어가면 while문 탈출 (while문에 갇히는것 방지)
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f000 f969 	bl	800229c <HAL_Delay>
   while (!UltraSonic_isCmpltRecvEcho(sonic)) { // echoFlag가 1일때 while문 탈출
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff2f 	bl	8001e2e <UltraSonic_isCmpltRecvEcho>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0ee      	beq.n	8001fb4 <UltraSonic_getDistance+0x14>
   }
   UltraSonic_clearEchoFlag(sonic);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ff35 	bl	8001e46 <UltraSonic_clearEchoFlag>
   return sonic->tim_counter * 0.034 / 2;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8a1b      	ldrh	r3, [r3, #16]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa9f 	bl	8000524 <__aeabi_i2d>
 8001fe6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002020 <UltraSonic_getDistance+0x80>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fb04 	bl	80005f8 <__aeabi_dmul>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002000:	f7fe fc24 	bl	800084c <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fd06 	bl	8000a1c <__aeabi_d2iz>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	f3af 8000 	nop.w
 8002020:	b020c49c 	.word	0xb020c49c
 8002024:	3fa16872 	.word	0x3fa16872

08002028 <button_init>:
 *      Author: kccistc
 */

#include "button.h"

void button_init(button_t *button, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	88fa      	ldrh	r2, [r7, #6]
 8002040:	809a      	strh	r2, [r3, #4]
	button->prevState = RELEASED;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	609a      	str	r2, [r3, #8]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <button_getState>:

button_state_t button_getState(button_t *button){
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	889b      	ldrh	r3, [r3, #4]
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f000 fbd2 	bl	8002810 <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	60fb      	str	r3, [r7, #12]
	if((button->prevState == RELEASED) && (curState == PUSHED)){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10a      	bne.n	800208e <button_getState+0x3a>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <button_getState+0x3a>
		HAL_Delay(50);
 800207e:	2032      	movs	r0, #50	@ 0x32
 8002080:	f000 f90c 	bl	800229c <HAL_Delay>
		button->prevState = PUSHED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 800208a:	2303      	movs	r3, #3
 800208c:	e00f      	b.n	80020ae <button_getState+0x5a>
	} else if((button->prevState == PUSHED) && (curState == RELEASED)){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10a      	bne.n	80020ac <button_getState+0x58>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <button_getState+0x58>
		HAL_Delay(50);
 800209c:	2032      	movs	r0, #50	@ 0x32
 800209e:	f000 f8fd 	bl	800229c <HAL_Delay>
		button->prevState = RELEASED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 80020a8:	2304      	movs	r3, #4
 80020aa:	e000      	b.n	80020ae <button_getState+0x5a>
	}
	return NO_ACT;
 80020ac:	2302      	movs	r3, #2
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <led_init>:
 */

#include "led.h"


void led_init(led_t *led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	4613      	mov	r3, r2
 80020c2:	80fb      	strh	r3, [r7, #6]
	led->GPIOx = GPIOx;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	601a      	str	r2, [r3, #0]
	led->GPIO_Pin = GPIO_Pin;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	809a      	strh	r2, [r3, #4]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <led_on>:

void led_on(led_t *led){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	889b      	ldrh	r3, [r3, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4619      	mov	r1, r3
 80020f0:	f000 fba6 	bl	8002840 <HAL_GPIO_WritePin>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <Motor_init>:

#include "motor.h"

void Motor_init(motor_t *motor, TIM_HandleTypeDef *htim, uint32_t Channel,
		GPIO_TypeDef *dir1_GPIO, uint16_t dir1_GPIO_Pin,
		GPIO_TypeDef *dir2_GPIO, uint16_t dir2_GPIO_Pin) {
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
	motor->htim = htim;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	601a      	str	r2, [r3, #0]
	motor->Channel = Channel;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	605a      	str	r2, [r3, #4]
	motor->dir1_GPIO = dir1_GPIO;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	609a      	str	r2, [r3, #8]
	motor->dir1_GPIO_Pin = dir1_GPIO_Pin;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8b3a      	ldrh	r2, [r7, #24]
 8002120:	819a      	strh	r2, [r3, #12]
	motor->dir2_GPIO = dir2_GPIO;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	611a      	str	r2, [r3, #16]
	motor->dir2_GPIO_Pin = dir2_GPIO_Pin;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8c3a      	ldrh	r2, [r7, #32]
 800212c:	829a      	strh	r2, [r3, #20]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <Motor_stop>:

void Motor_stop(motor_t *motor){
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(motor->htim, motor->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f001 fe09 	bl	8003d64 <HAL_TIM_PWM_Stop>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <Motor_setSpeed>:
	HAL_GPIO_WritePin(motor->dir1_GPIO, motor->dir1_GPIO_Pin,RESET);
		HAL_GPIO_WritePin(motor->dir2_GPIO, motor->dir2_GPIO_Pin, SET);
		HAL_TIM_PWM_Start(motor->htim, motor->Channel);
}

void Motor_setSpeed(motor_t *motor, int speedVal){
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, speedVal);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <Motor_setSpeed+0x1e>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002176:	e018      	b.n	80021aa <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, speedVal);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d105      	bne.n	800218c <Motor_setSpeed+0x32>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800218a:	e00e      	b.n	80021aa <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, speedVal);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d105      	bne.n	80021a0 <Motor_setSpeed+0x46>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800219e:	e004      	b.n	80021aa <Motor_setSpeed+0x50>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, speedVal);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021bc:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a0d      	ldr	r2, [pc, #52]	@ (80021f8 <HAL_Init+0x40>)
 80021c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_Init+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <HAL_Init+0x40>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	@ (80021f8 <HAL_Init+0x40>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 f94f 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff f8ce 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	@ (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f967 	bl	80024ee <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f92f 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	@ (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000000 	.word	0x20000000
 8002254:	20000008 	.word	0x20000008
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008
 8002280:	200002e4 	.word	0x200002e4

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200002e4 	.word	0x200002e4

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	db0b      	blt.n	8002372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4907      	ldr	r1, [pc, #28]	@ (8002380 <__NVIC_EnableIRQ+0x38>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2001      	movs	r0, #1
 800236a:	fa00 f202 	lsl.w	r2, r0, r2
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	2b00      	cmp	r3, #0
 8002396:	db0a      	blt.n	80023ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	b2da      	uxtb	r2, r3
 800239c:	490c      	ldr	r1, [pc, #48]	@ (80023d0 <__NVIC_SetPriority+0x4c>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	440b      	add	r3, r1
 80023a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023ac:	e00a      	b.n	80023c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4908      	ldr	r1, [pc, #32]	@ (80023d4 <__NVIC_SetPriority+0x50>)
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	3b04      	subs	r3, #4
 80023bc:	0112      	lsls	r2, r2, #4
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	440b      	add	r3, r1
 80023c2:	761a      	strb	r2, [r3, #24]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	@ 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f1c3 0307 	rsb	r3, r3, #7
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	bf28      	it	cs
 80023f6:	2304      	movcs	r3, #4
 80023f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3304      	adds	r3, #4
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d902      	bls.n	8002408 <NVIC_EncodePriority+0x30>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3b03      	subs	r3, #3
 8002406:	e000      	b.n	800240a <NVIC_EncodePriority+0x32>
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	401a      	ands	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002420:	f04f 31ff 	mov.w	r1, #4294967295
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	43d9      	mvns	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002430:	4313      	orrs	r3, r2
         );
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff8e 	bl	8002384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff29 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff3e 	bl	800232c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff8e 	bl	80023d8 <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5d 	bl	8002384 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4603      	mov	r3, r0
 80024da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff31 	bl	8002348 <__NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ffa2 	bl	8002440 <SysTick_Config>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	e159      	b.n	80027d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	f040 8148 	bne.w	80027d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d005      	beq.n	800255a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	2b02      	cmp	r3, #2
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0303 	and.w	r3, r3, #3
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d017      	beq.n	80025f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	2203      	movs	r2, #3
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d123      	bne.n	800264c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a2 	beq.w	80027d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	4a56      	ldr	r2, [pc, #344]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800269c:	6453      	str	r3, [r2, #68]	@ 0x44
 800269e:	4b54      	ldr	r3, [pc, #336]	@ (80027f0 <HAL_GPIO_Init+0x2e8>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026aa:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a49      	ldr	r2, [pc, #292]	@ (80027f8 <HAL_GPIO_Init+0x2f0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x202>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a48      	ldr	r2, [pc, #288]	@ (80027fc <HAL_GPIO_Init+0x2f4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x1fe>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a47      	ldr	r2, [pc, #284]	@ (8002800 <HAL_GPIO_Init+0x2f8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x1fa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_GPIO_Init+0x2fc>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x1f6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a45      	ldr	r2, [pc, #276]	@ (8002808 <HAL_GPIO_Init+0x300>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x1f2>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fa:	2307      	movs	r3, #7
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x204>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x204>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x204>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	@ (80027f4 <HAL_GPIO_Init+0x2ec>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b38      	ldr	r3, [pc, #224]	@ (800280c <HAL_GPIO_Init+0x304>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a2f      	ldr	r2, [pc, #188]	@ (800280c <HAL_GPIO_Init+0x304>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <HAL_GPIO_Init+0x304>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a24      	ldr	r2, [pc, #144]	@ (800280c <HAL_GPIO_Init+0x304>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <HAL_GPIO_Init+0x304>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1a      	ldr	r2, [pc, #104]	@ (800280c <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b18      	ldr	r3, [pc, #96]	@ (800280c <HAL_GPIO_Init+0x304>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f aea2 	bls.w	8002524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40013c00 	.word	0x40013c00

08002810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
 800282c:	e001      	b.n	8002832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800287e:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f8a6 	bl	80019e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002898:	bf00      	nop
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e12b      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fd86 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	@ 0x24
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002908:	f001 f8da 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 800290c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a81      	ldr	r2, [pc, #516]	@ (8002b18 <HAL_I2C_Init+0x274>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d807      	bhi.n	8002928 <HAL_I2C_Init+0x84>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a80      	ldr	r2, [pc, #512]	@ (8002b1c <HAL_I2C_Init+0x278>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	e006      	b.n	8002936 <HAL_I2C_Init+0x92>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b20 <HAL_I2C_Init+0x27c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0e7      	b.n	8002b0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a78      	ldr	r2, [pc, #480]	@ (8002b24 <HAL_I2C_Init+0x280>)
 8002942:	fba2 2303 	umull	r2, r3, r2, r3
 8002946:	0c9b      	lsrs	r3, r3, #18
 8002948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b18 <HAL_I2C_Init+0x274>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d802      	bhi.n	8002978 <HAL_I2C_Init+0xd4>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	e009      	b.n	800298c <HAL_I2C_Init+0xe8>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	4a69      	ldr	r2, [pc, #420]	@ (8002b28 <HAL_I2C_Init+0x284>)
 8002984:	fba2 2303 	umull	r2, r3, r2, r3
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	3301      	adds	r3, #1
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800299e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	495c      	ldr	r1, [pc, #368]	@ (8002b18 <HAL_I2C_Init+0x274>)
 80029a8:	428b      	cmp	r3, r1
 80029aa:	d819      	bhi.n	80029e0 <HAL_I2C_Init+0x13c>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e59      	subs	r1, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ba:	1c59      	adds	r1, r3, #1
 80029bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029c0:	400b      	ands	r3, r1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_I2C_Init+0x138>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1e59      	subs	r1, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	e051      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029dc:	2304      	movs	r3, #4
 80029de:	e04f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <HAL_I2C_Init+0x168>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1e58      	subs	r0, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	440b      	add	r3, r1
 80029f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029fa:	3301      	adds	r3, #1
 80029fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf0c      	ite	eq
 8002a04:	2301      	moveq	r3, #1
 8002a06:	2300      	movne	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e012      	b.n	8002a32 <HAL_I2C_Init+0x18e>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x196>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e022      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10e      	bne.n	8002a60 <HAL_I2C_Init+0x1bc>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1e58      	subs	r0, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	440b      	add	r3, r1
 8002a50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a5e:	e00f      	b.n	8002a80 <HAL_I2C_Init+0x1dc>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e58      	subs	r0, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6859      	ldr	r1, [r3, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	0099      	lsls	r1, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a76:	3301      	adds	r3, #1
 8002a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	6809      	ldr	r1, [r1, #0]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6911      	ldr	r1, [r2, #16]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	000186a0 	.word	0x000186a0
 8002b1c:	001e847f 	.word	0x001e847f
 8002b20:	003d08ff 	.word	0x003d08ff
 8002b24:	431bde83 	.word	0x431bde83
 8002b28:	10624dd3 	.word	0x10624dd3

08002b2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b40:	f7ff fba0 	bl	8002284 <HAL_GetTick>
 8002b44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	f040 80e0 	bne.w	8002d14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2319      	movs	r3, #25
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	4970      	ldr	r1, [pc, #448]	@ (8002d20 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f964 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e0d3      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x50>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0cc      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d007      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2221      	movs	r2, #33	@ 0x21
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a50      	ldr	r2, [pc, #320]	@ (8002d24 <HAL_I2C_Master_Transmit+0x1f8>)
 8002be2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002be4:	8979      	ldrh	r1, [r7, #10]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	6a3a      	ldr	r2, [r7, #32]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f89c 	bl	8002d28 <I2C_MasterRequestWrite>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e08d      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c10:	e066      	b.n	8002ce0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6a39      	ldr	r1, [r7, #32]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa22 	bl	8003060 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_I2C_Master_Transmit+0x188>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	6a39      	ldr	r1, [r7, #32]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa19 	bl	80030f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d107      	bne.n	8002cdc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e01a      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d194      	bne.n	8002c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d006      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d003      	beq.n	8002d52 <I2C_MasterRequestWrite+0x2a>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d50:	d108      	bne.n	8002d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e00b      	b.n	8002d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	2b12      	cmp	r3, #18
 8002d6a:	d107      	bne.n	8002d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f84f 	bl	8002e2c <I2C_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00d      	beq.n	8002db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	d103      	bne.n	8002dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e035      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002db8:	d108      	bne.n	8002dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	e01b      	b.n	8002e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002dcc:	897b      	ldrh	r3, [r7, #10]
 8002dce:	11db      	asrs	r3, r3, #7
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	f003 0306 	and.w	r3, r3, #6
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f063 030f 	orn	r3, r3, #15
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	490e      	ldr	r1, [pc, #56]	@ (8002e24 <I2C_MasterRequestWrite+0xfc>)
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f898 	bl	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e010      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4907      	ldr	r1, [pc, #28]	@ (8002e28 <I2C_MasterRequestWrite+0x100>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f888 	bl	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00010008 	.word	0x00010008
 8002e28:	00010002 	.word	0x00010002

08002e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e3c:	e048      	b.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e44:	d044      	beq.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e46:	f7ff fa1d 	bl	8002284 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d302      	bcc.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d139      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10d      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	e00c      	b.n	8002e9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d116      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e023      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10d      	bne.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	e00c      	b.n	8002f10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	43da      	mvns	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4013      	ands	r3, r2
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d093      	beq.n	8002e3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	e071      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3e:	d123      	bne.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	f043 0204 	orr.w	r2, r3, #4
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e067      	b.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d041      	beq.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7ff f978 	bl	8002284 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d136      	bne.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10c      	bne.n	8002fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e00b      	b.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e021      	b.n	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10c      	bne.n	8003038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e00b      	b.n	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f af6d 	bne.w	8002f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306c:	e034      	b.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f886 	bl	8003180 <I2C_IsAcknowledgeFailed>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e034      	b.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d028      	beq.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7ff f8fd 	bl	8002284 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11d      	bne.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	2b80      	cmp	r3, #128	@ 0x80
 80030a8:	d016      	beq.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e007      	b.n	80030e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e2:	2b80      	cmp	r3, #128	@ 0x80
 80030e4:	d1c3      	bne.n	800306e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030fc:	e034      	b.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f83e 	bl	8003180 <I2C_IsAcknowledgeFailed>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e034      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d028      	beq.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7ff f8b5 	bl	8002284 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11d      	bne.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d016      	beq.n	8003168 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f043 0220 	orr.w	r2, r3, #32
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	2b04      	cmp	r3, #4
 8003174:	d1c3      	bne.n	80030fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003196:	d11b      	bne.n	80031d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	f043 0204 	orr.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e267      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b85      	ldr	r3, [pc, #532]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b82      	ldr	r3, [pc, #520]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b7e      	ldr	r3, [pc, #504]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x108>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e242      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x74>
 8003246:	4b76      	ldr	r3, [pc, #472]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6f      	ldr	r2, [pc, #444]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6c      	ldr	r2, [pc, #432]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003278:	4b69      	ldr	r3, [pc, #420]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a68      	ldr	r2, [pc, #416]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b66      	ldr	r3, [pc, #408]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a65      	ldr	r2, [pc, #404]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe fff4 	bl	8002284 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fff0 	bl	8002284 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e207      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xc0>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe ffe0 	bl	8002284 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe ffdc 	bl	8002284 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f3      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b51      	ldr	r3, [pc, #324]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0xe8>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c7      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4937      	ldr	r1, [pc, #220]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <HAL_RCC_OscConfig+0x244>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe ff95 	bl	8002284 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7fe ff91 	bl	8002284 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a8      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4925      	ldr	r1, [pc, #148]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x244>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe ff74 	bl	8002284 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7fe ff70 	bl	8002284 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e187      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <HAL_RCC_OscConfig+0x248>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7fe ff54 	bl	8002284 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fe ff50 	bl	8002284 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e167      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x200>
 80033fe:	e01b      	b.n	8003438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_OscConfig+0x248>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7fe ff3d 	bl	8002284 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e00e      	b.n	800342c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7fe ff39 	bl	8002284 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d907      	bls.n	800342c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e150      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003420:	40023800 	.word	0x40023800
 8003424:	42470000 	.word	0x42470000
 8003428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ea      	bne.n	800340e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8097 	beq.w	8003574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	4b81      	ldr	r3, [pc, #516]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b7d      	ldr	r3, [pc, #500]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	4a7c      	ldr	r2, [pc, #496]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	@ 0x40
 8003466:	4b7a      	ldr	r3, [pc, #488]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b77      	ldr	r3, [pc, #476]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b74      	ldr	r3, [pc, #464]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a73      	ldr	r2, [pc, #460]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7fe fef9 	bl	8002284 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7fe fef5 	bl	8002284 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e10c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x2ea>
 80034bc:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a63      	ldr	r2, [pc, #396]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c8:	e01c      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x30c>
 80034d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034de:	4b5c      	ldr	r3, [pc, #368]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ec:	4b58      	ldr	r3, [pc, #352]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f8:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	4a54      	ldr	r2, [pc, #336]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d015      	beq.n	8003538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fe feba 	bl	8002284 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fe feb6 	bl	8002284 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0cb      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <HAL_RCC_OscConfig+0x334>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fe fea4 	bl	8002284 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fe fea0 	bl	8002284 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0b5      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	4a38      	ldr	r2, [pc, #224]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a1 	beq.w	80036c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d05c      	beq.n	8003644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d141      	bne.n	8003616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b31      	ldr	r3, [pc, #196]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fe74 	bl	8002284 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7fe fe70 	bl	8002284 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e087      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	491b      	ldr	r1, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fe49 	bl	8002284 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fe45 	bl	8002284 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e05c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x416>
 8003614:	e054      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fe32 	bl	8002284 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fe2e 	bl	8002284 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e045      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x444>
 8003642:	e03d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e038      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d028      	beq.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d121      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d11a      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fd60 	bl	8002284 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7fe fd5c 	bl	8002284 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fcc0 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	080056e0 	.word	0x080056e0
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b094      	sub	sp, #80	@ 0x50
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a8:	2300      	movs	r3, #0
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ac:	2300      	movs	r3, #0
 80038ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b79      	ldr	r3, [pc, #484]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80e1 	bhi.w	8003a88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e0db      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b73      	ldr	r3, [pc, #460]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80038d4:	e0db      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b73      	ldr	r3, [pc, #460]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x208>)
 80038d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038da:	e0d8      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d063      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	2200      	movs	r2, #0
 80038fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	@ 0x34
 800390a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800390e:	4622      	mov	r2, r4
 8003910:	462b      	mov	r3, r5
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	0159      	lsls	r1, r3, #5
 800391c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003920:	0150      	lsls	r0, r2, #5
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4621      	mov	r1, r4
 8003928:	1a51      	subs	r1, r2, r1
 800392a:	6139      	str	r1, [r7, #16]
 800392c:	4629      	mov	r1, r5
 800392e:	eb63 0301 	sbc.w	r3, r3, r1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003940:	4659      	mov	r1, fp
 8003942:	018b      	lsls	r3, r1, #6
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800394a:	4651      	mov	r1, sl
 800394c:	018a      	lsls	r2, r1, #6
 800394e:	4651      	mov	r1, sl
 8003950:	ebb2 0801 	subs.w	r8, r2, r1
 8003954:	4659      	mov	r1, fp
 8003956:	eb63 0901 	sbc.w	r9, r3, r1
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800396a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396e:	4690      	mov	r8, r2
 8003970:	4699      	mov	r9, r3
 8003972:	4623      	mov	r3, r4
 8003974:	eb18 0303 	adds.w	r3, r8, r3
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	462b      	mov	r3, r5
 800397c:	eb49 0303 	adc.w	r3, r9, r3
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800398e:	4629      	mov	r1, r5
 8003990:	024b      	lsls	r3, r1, #9
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003998:	4621      	mov	r1, r4
 800399a:	024a      	lsls	r2, r1, #9
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039ac:	f7fd f85e 	bl	8000a6c <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039b8:	e058      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ba:	4b38      	ldr	r3, [pc, #224]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	099b      	lsrs	r3, r3, #6
 80039c0:	2200      	movs	r2, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	4611      	mov	r1, r2
 80039c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ca:	623b      	str	r3, [r7, #32]
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039d4:	4642      	mov	r2, r8
 80039d6:	464b      	mov	r3, r9
 80039d8:	f04f 0000 	mov.w	r0, #0
 80039dc:	f04f 0100 	mov.w	r1, #0
 80039e0:	0159      	lsls	r1, r3, #5
 80039e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e6:	0150      	lsls	r0, r2, #5
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4641      	mov	r1, r8
 80039ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80039f2:	4649      	mov	r1, r9
 80039f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a10:	eb63 050b 	sbc.w	r5, r3, fp
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	00eb      	lsls	r3, r5, #3
 8003a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a22:	00e2      	lsls	r2, r4, #3
 8003a24:	4614      	mov	r4, r2
 8003a26:	461d      	mov	r5, r3
 8003a28:	4643      	mov	r3, r8
 8003a2a:	18e3      	adds	r3, r4, r3
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	464b      	mov	r3, r9
 8003a30:	eb45 0303 	adc.w	r3, r5, r3
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a42:	4629      	mov	r1, r5
 8003a44:	028b      	lsls	r3, r1, #10
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	028a      	lsls	r2, r1, #10
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a56:	2200      	movs	r2, #0
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	61fa      	str	r2, [r7, #28]
 8003a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a60:	f7fd f804 	bl	8000a6c <__aeabi_uldivmod>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4613      	mov	r3, r2
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3750      	adds	r7, #80	@ 0x50
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200

08003aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000000 	.word	0x20000000

08003ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ac4:	f7ff fff0 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0a9b      	lsrs	r3, r3, #10
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	@ (8003ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	080056f0 	.word	0x080056f0

08003ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aec:	f7ff ffdc 	bl	8003aa8 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0b5b      	lsrs	r3, r3, #13
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	080056f0 	.word	0x080056f0

08003b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e041      	b.n	8003ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fc98 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 faf6 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d001      	beq.n	8003bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e03c      	b.n	8003c42 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_TIM_Base_Start+0xa0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d018      	beq.n	8003c0c <HAL_TIM_Base_Start+0x5c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be2:	d013      	beq.n	8003c0c <HAL_TIM_Base_Start+0x5c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_TIM_Base_Start+0xa4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_TIM_Base_Start+0x5c>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_TIM_Base_Start+0xa8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d009      	beq.n	8003c0c <HAL_TIM_Base_Start+0x5c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <HAL_TIM_Base_Start+0xac>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_TIM_Base_Start+0x5c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <HAL_TIM_Base_Start+0xb0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d111      	bne.n	8003c30 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d010      	beq.n	8003c40 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2e:	e007      	b.n	8003c40 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40000c00 	.word	0x40000c00
 8003c60:	40014000 	.word	0x40014000

08003c64 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10f      	bne.n	8003c9c <HAL_TIM_Base_Stop+0x38>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_Base_Stop+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e041      	b.n	8003d48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d106      	bne.n	8003cde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f839 	bl	8003d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f000 fa25 	bl	8004140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc94 	bl	80046a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a29      	ldr	r2, [pc, #164]	@ (8003e28 <HAL_TIM_PWM_Stop+0xc4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d117      	bne.n	8003db6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_TIM_PWM_Stop+0x52>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_PWM_Stop+0x52>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003db4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10f      	bne.n	8003de6 <HAL_TIM_PWM_Stop+0x82>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <HAL_TIM_PWM_Stop+0x82>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_PWM_Stop+0x92>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003df4:	e013      	b.n	8003e1e <HAL_TIM_PWM_Stop+0xba>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Stop+0xa2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e04:	e00b      	b.n	8003e1e <HAL_TIM_PWM_Stop+0xba>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Stop+0xb2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e14:	e003      	b.n	8003e1e <HAL_TIM_PWM_Stop+0xba>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40010000 	.word	0x40010000

08003e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0ae      	b.n	8003fa8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b0c      	cmp	r3, #12
 8003e56:	f200 809f 	bhi.w	8003f98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e95 	.word	0x08003e95
 8003e64:	08003f99 	.word	0x08003f99
 8003e68:	08003f99 	.word	0x08003f99
 8003e6c:	08003f99 	.word	0x08003f99
 8003e70:	08003ed5 	.word	0x08003ed5
 8003e74:	08003f99 	.word	0x08003f99
 8003e78:	08003f99 	.word	0x08003f99
 8003e7c:	08003f99 	.word	0x08003f99
 8003e80:	08003f17 	.word	0x08003f17
 8003e84:	08003f99 	.word	0x08003f99
 8003e88:	08003f99 	.word	0x08003f99
 8003e8c:	08003f99 	.word	0x08003f99
 8003e90:	08003f57 	.word	0x08003f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 f9dc 	bl	8004258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	619a      	str	r2, [r3, #24]
      break;
 8003ed2:	e064      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fa22 	bl	8004324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	619a      	str	r2, [r3, #24]
      break;
 8003f14:	e043      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa6d 	bl	80043fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0208 	orr.w	r2, r2, #8
 8003f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0204 	bic.w	r2, r2, #4
 8003f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	61da      	str	r2, [r3, #28]
      break;
 8003f54:	e023      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fab7 	bl	80044d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	021a      	lsls	r2, r3, #8
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	61da      	str	r2, [r3, #28]
      break;
 8003f96:	e002      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_ConfigClockSource+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e0b4      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x186>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004004:	d03e      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0xd4>
 8004006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400a:	f200 8087 	bhi.w	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004012:	f000 8086 	beq.w	8004122 <HAL_TIM_ConfigClockSource+0x172>
 8004016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401a:	d87f      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b70      	cmp	r3, #112	@ 0x70
 800401e:	d01a      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xa6>
 8004020:	2b70      	cmp	r3, #112	@ 0x70
 8004022:	d87b      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b60      	cmp	r3, #96	@ 0x60
 8004026:	d050      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x11a>
 8004028:	2b60      	cmp	r3, #96	@ 0x60
 800402a:	d877      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b50      	cmp	r3, #80	@ 0x50
 800402e:	d03c      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0xfa>
 8004030:	2b50      	cmp	r3, #80	@ 0x50
 8004032:	d873      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b40      	cmp	r3, #64	@ 0x40
 8004036:	d058      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x13a>
 8004038:	2b40      	cmp	r3, #64	@ 0x40
 800403a:	d86f      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b30      	cmp	r3, #48	@ 0x30
 800403e:	d064      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	2b30      	cmp	r3, #48	@ 0x30
 8004042:	d86b      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b20      	cmp	r3, #32
 8004046:	d060      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004048:	2b20      	cmp	r3, #32
 800404a:	d867      	bhi.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05c      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004050:	2b10      	cmp	r3, #16
 8004052:	d05a      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x15a>
 8004054:	e062      	b.n	800411c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	f000 fafd 	bl	8004664 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	609a      	str	r2, [r3, #8]
      break;
 8004082:	e04f      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	f000 fae6 	bl	8004664 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040a6:	609a      	str	r2, [r3, #8]
      break;
 80040a8:	e03c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fa5a 	bl	8004570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2150      	movs	r1, #80	@ 0x50
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fab3 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 80040c8:	e02c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fa79 	bl	80045ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2160      	movs	r1, #96	@ 0x60
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 faa3 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 80040e8:	e01c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fa3a 	bl	8004570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2140      	movs	r1, #64	@ 0x40
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fa93 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004108:	e00c      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f000 fa8a 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 800411a:	e003      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e000      	b.n	8004124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3a      	ldr	r2, [pc, #232]	@ (800423c <TIM_Base_SetConfig+0xfc>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00f      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415e:	d00b      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a37      	ldr	r2, [pc, #220]	@ (8004240 <TIM_Base_SetConfig+0x100>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a36      	ldr	r2, [pc, #216]	@ (8004244 <TIM_Base_SetConfig+0x104>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a35      	ldr	r2, [pc, #212]	@ (8004248 <TIM_Base_SetConfig+0x108>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d108      	bne.n	800418a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a2b      	ldr	r2, [pc, #172]	@ (800423c <TIM_Base_SetConfig+0xfc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d01b      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004198:	d017      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a28      	ldr	r2, [pc, #160]	@ (8004240 <TIM_Base_SetConfig+0x100>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a27      	ldr	r2, [pc, #156]	@ (8004244 <TIM_Base_SetConfig+0x104>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00f      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a26      	ldr	r2, [pc, #152]	@ (8004248 <TIM_Base_SetConfig+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00b      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a25      	ldr	r2, [pc, #148]	@ (800424c <TIM_Base_SetConfig+0x10c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d007      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a24      	ldr	r2, [pc, #144]	@ (8004250 <TIM_Base_SetConfig+0x110>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d003      	beq.n	80041ca <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a23      	ldr	r2, [pc, #140]	@ (8004254 <TIM_Base_SetConfig+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d108      	bne.n	80041dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a0e      	ldr	r2, [pc, #56]	@ (800423c <TIM_Base_SetConfig+0xfc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d103      	bne.n	8004210 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d105      	bne.n	800422e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f023 0201 	bic.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	611a      	str	r2, [r3, #16]
  }
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40010000 	.word	0x40010000
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800
 8004248:	40000c00 	.word	0x40000c00
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800

08004258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f023 0201 	bic.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0303 	bic.w	r3, r3, #3
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f023 0302 	bic.w	r3, r3, #2
 80042a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004320 <TIM_OC1_SetConfig+0xc8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10c      	bne.n	80042ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0308 	bic.w	r3, r3, #8
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a13      	ldr	r2, [pc, #76]	@ (8004320 <TIM_OC1_SetConfig+0xc8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40010000 	.word	0x40010000

08004324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0210 	bic.w	r2, r3, #16
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800435a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0320 	bic.w	r3, r3, #32
 800436e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1e      	ldr	r2, [pc, #120]	@ (80043f8 <TIM_OC2_SetConfig+0xd4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d10d      	bne.n	80043a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800438a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800439e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a15      	ldr	r2, [pc, #84]	@ (80043f8 <TIM_OC2_SetConfig+0xd4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d113      	bne.n	80043d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000

080043fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <TIM_OC3_SetConfig+0xd0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10d      	bne.n	8004476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a14      	ldr	r2, [pc, #80]	@ (80044cc <TIM_OC3_SetConfig+0xd0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d113      	bne.n	80044a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	40010000 	.word	0x40010000

080044d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800451a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a10      	ldr	r2, [pc, #64]	@ (800456c <TIM_OC4_SetConfig+0x9c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d109      	bne.n	8004544 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	019b      	lsls	r3, r3, #6
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40010000 	.word	0x40010000

08004570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004570:	b480      	push	{r7}
 8004572:	b087      	sub	sp, #28
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 0201 	bic.w	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800459a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f023 030a 	bic.w	r3, r3, #10
 80045ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f023 0210 	bic.w	r2, r3, #16
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800460a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	f043 0307 	orr.w	r3, r3, #7
 8004650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800467e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	021a      	lsls	r2, r3, #8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	431a      	orrs	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4313      	orrs	r3, r2
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	bf00      	nop
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2201      	movs	r2, #1
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1a      	ldr	r2, [r3, #32]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	fa01 f303 	lsl.w	r3, r1, r3
 80046dc:	431a      	orrs	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004704:	2302      	movs	r3, #2
 8004706:	e050      	b.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d018      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004754:	d013      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00e      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a16      	ldr	r2, [pc, #88]	@ (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d009      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d004      	beq.n	800477e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a13      	ldr	r2, [pc, #76]	@ (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d10c      	bne.n	8004798 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4313      	orrs	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40014000 	.word	0x40014000

080047cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e042      	b.n	8004864 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fed6 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	@ 0x24
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800480e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f82b 	bl	800486c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800486c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004870:	b0c0      	sub	sp, #256	@ 0x100
 8004872:	af00      	add	r7, sp, #0
 8004874:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	68d9      	ldr	r1, [r3, #12]
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	ea40 0301 	orr.w	r3, r0, r1
 8004894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048c4:	f021 010c 	bic.w	r1, r1, #12
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048d2:	430b      	orrs	r3, r1
 80048d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	6999      	ldr	r1, [r3, #24]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	ea40 0301 	orr.w	r3, r0, r1
 80048f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004b38 <UART_SetConfig+0x2cc>)
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d005      	beq.n	800490c <UART_SetConfig+0xa0>
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b8d      	ldr	r3, [pc, #564]	@ (8004b3c <UART_SetConfig+0x2d0>)
 8004908:	429a      	cmp	r2, r3
 800490a:	d104      	bne.n	8004916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7ff f8ec 	bl	8003ae8 <HAL_RCC_GetPCLK2Freq>
 8004910:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004914:	e003      	b.n	800491e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004916:	f7ff f8d3 	bl	8003ac0 <HAL_RCC_GetPCLK1Freq>
 800491a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004928:	f040 810c 	bne.w	8004b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800492c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004936:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800493a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	1891      	adds	r1, r2, r2
 8004944:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004946:	415b      	adcs	r3, r3
 8004948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800494a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800494e:	4621      	mov	r1, r4
 8004950:	eb12 0801 	adds.w	r8, r2, r1
 8004954:	4629      	mov	r1, r5
 8004956:	eb43 0901 	adc.w	r9, r3, r1
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496e:	4690      	mov	r8, r2
 8004970:	4699      	mov	r9, r3
 8004972:	4623      	mov	r3, r4
 8004974:	eb18 0303 	adds.w	r3, r8, r3
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800497c:	462b      	mov	r3, r5
 800497e:	eb49 0303 	adc.w	r3, r9, r3
 8004982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004992:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800499a:	460b      	mov	r3, r1
 800499c:	18db      	adds	r3, r3, r3
 800499e:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a0:	4613      	mov	r3, r2
 80049a2:	eb42 0303 	adc.w	r3, r2, r3
 80049a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049b0:	f7fc f85c 	bl	8000a6c <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4b61      	ldr	r3, [pc, #388]	@ (8004b40 <UART_SetConfig+0x2d4>)
 80049ba:	fba3 2302 	umull	r2, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	011c      	lsls	r4, r3, #4
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049dc:	415b      	adcs	r3, r3
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049e4:	4641      	mov	r1, r8
 80049e6:	eb12 0a01 	adds.w	sl, r2, r1
 80049ea:	4649      	mov	r1, r9
 80049ec:	eb43 0b01 	adc.w	fp, r3, r1
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a04:	4692      	mov	sl, r2
 8004a06:	469b      	mov	fp, r3
 8004a08:	4643      	mov	r3, r8
 8004a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a12:	464b      	mov	r3, r9
 8004a14:	eb4b 0303 	adc.w	r3, fp, r3
 8004a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a30:	460b      	mov	r3, r1
 8004a32:	18db      	adds	r3, r3, r3
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a36:	4613      	mov	r3, r2
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a46:	f7fc f811 	bl	8000a6c <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4b3b      	ldr	r3, [pc, #236]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004a52:	fba3 2301 	umull	r2, r3, r3, r1
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2264      	movs	r2, #100	@ 0x64
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	1acb      	subs	r3, r1, r3
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a66:	4b36      	ldr	r3, [pc, #216]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004a68:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a74:	441c      	add	r4, r3
 8004a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a90:	415b      	adcs	r3, r3
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a98:	4641      	mov	r1, r8
 8004a9a:	1851      	adds	r1, r2, r1
 8004a9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	414b      	adcs	r3, r1
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	00cb      	lsls	r3, r1, #3
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aba:	4651      	mov	r1, sl
 8004abc:	00ca      	lsls	r2, r1, #3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004acc:	464b      	mov	r3, r9
 8004ace:	460a      	mov	r2, r1
 8004ad0:	eb42 0303 	adc.w	r3, r2, r3
 8004ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004aec:	460b      	mov	r3, r1
 8004aee:	18db      	adds	r3, r3, r3
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af2:	4613      	mov	r3, r2
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b02:	f7fb ffb3 	bl	8000a6c <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	2164      	movs	r1, #100	@ 0x64
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	3332      	adds	r3, #50	@ 0x32
 8004b1e:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	f003 0207 	and.w	r2, r3, #7
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4422      	add	r2, r4
 8004b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b34:	e106      	b.n	8004d44 <UART_SetConfig+0x4d8>
 8004b36:	bf00      	nop
 8004b38:	40011000 	.word	0x40011000
 8004b3c:	40011400 	.word	0x40011400
 8004b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b56:	4642      	mov	r2, r8
 8004b58:	464b      	mov	r3, r9
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	6239      	str	r1, [r7, #32]
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b66:	4641      	mov	r1, r8
 8004b68:	1854      	adds	r4, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb43 0501 	adc.w	r5, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	eb45 0303 	adc.w	r3, r5, r3
 8004b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	008b      	lsls	r3, r1, #2
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	008a      	lsls	r2, r1, #2
 8004bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bc4:	f7fb ff52 	bl	8000a6c <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4b60      	ldr	r3, [pc, #384]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004bce:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	011c      	lsls	r4, r3, #4
 8004bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	1891      	adds	r1, r2, r2
 8004bee:	61b9      	str	r1, [r7, #24]
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	1851      	adds	r1, r2, r1
 8004bfc:	6139      	str	r1, [r7, #16]
 8004bfe:	4649      	mov	r1, r9
 8004c00:	414b      	adcs	r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	00cb      	lsls	r3, r1, #3
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	00ca      	lsls	r2, r1, #3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	4642      	mov	r2, r8
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	460a      	mov	r2, r1
 8004c30:	eb42 0303 	adc.w	r3, r2, r3
 8004c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c50:	4649      	mov	r1, r9
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	4641      	mov	r1, r8
 8004c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	008a      	lsls	r2, r1, #2
 8004c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c62:	f7fb ff03 	bl	8000a6c <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4b38      	ldr	r3, [pc, #224]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2264      	movs	r2, #100	@ 0x64
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	1acb      	subs	r3, r1, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	@ 0x32
 8004c80:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c8c:	441c      	add	r4, r3
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c96:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cac:	4641      	mov	r1, r8
 8004cae:	1851      	adds	r1, r2, r1
 8004cb0:	6039      	str	r1, [r7, #0]
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	414b      	adcs	r3, r1
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cce:	4651      	mov	r1, sl
 8004cd0:	00ca      	lsls	r2, r1, #3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cde:	464b      	mov	r3, r9
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	eb42 0303 	adc.w	r3, r2, r3
 8004ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d00:	4649      	mov	r1, r9
 8004d02:	008b      	lsls	r3, r1, #2
 8004d04:	4641      	mov	r1, r8
 8004d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	008a      	lsls	r2, r1, #2
 8004d0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d12:	f7fb feab 	bl	8000a6c <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	2164      	movs	r1, #100	@ 0x64
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	3332      	adds	r3, #50	@ 0x32
 8004d2e:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4422      	add	r2, r4
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d50:	51eb851f 	.word	0x51eb851f

08004d54 <siprintf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	b500      	push	{lr}
 8004d58:	b09c      	sub	sp, #112	@ 0x70
 8004d5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d5c:	9002      	str	r0, [sp, #8]
 8004d5e:	9006      	str	r0, [sp, #24]
 8004d60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d64:	4809      	ldr	r0, [pc, #36]	@ (8004d8c <siprintf+0x38>)
 8004d66:	9107      	str	r1, [sp, #28]
 8004d68:	9104      	str	r1, [sp, #16]
 8004d6a:	4909      	ldr	r1, [pc, #36]	@ (8004d90 <siprintf+0x3c>)
 8004d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d70:	9105      	str	r1, [sp, #20]
 8004d72:	6800      	ldr	r0, [r0, #0]
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	a902      	add	r1, sp, #8
 8004d78:	f000 f994 	bl	80050a4 <_svfiprintf_r>
 8004d7c:	9b02      	ldr	r3, [sp, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	b01c      	add	sp, #112	@ 0x70
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b003      	add	sp, #12
 8004d8a:	4770      	bx	lr
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	ffff0208 	.word	0xffff0208

08004d94 <memset>:
 8004d94:	4402      	add	r2, r0
 8004d96:	4603      	mov	r3, r0
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <memset+0xa>
 8004d9c:	4770      	bx	lr
 8004d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004da2:	e7f9      	b.n	8004d98 <memset+0x4>

08004da4 <__errno>:
 8004da4:	4b01      	ldr	r3, [pc, #4]	@ (8004dac <__errno+0x8>)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	@ (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	@ (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f000 fc66 	bl	8005694 <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08005734 	.word	0x08005734
 8004dec:	08005734 	.word	0x08005734
 8004df0:	08005734 	.word	0x08005734
 8004df4:	08005738 	.word	0x08005738

08004df8 <__retarget_lock_acquire_recursive>:
 8004df8:	4770      	bx	lr

08004dfa <__retarget_lock_release_recursive>:
 8004dfa:	4770      	bx	lr

08004dfc <_free_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4605      	mov	r5, r0
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d041      	beq.n	8004e88 <_free_r+0x8c>
 8004e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e08:	1f0c      	subs	r4, r1, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bfb8      	it	lt
 8004e0e:	18e4      	addlt	r4, r4, r3
 8004e10:	f000 f8e0 	bl	8004fd4 <__malloc_lock>
 8004e14:	4a1d      	ldr	r2, [pc, #116]	@ (8004e8c <_free_r+0x90>)
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	b933      	cbnz	r3, 8004e28 <_free_r+0x2c>
 8004e1a:	6063      	str	r3, [r4, #4]
 8004e1c:	6014      	str	r4, [r2, #0]
 8004e1e:	4628      	mov	r0, r5
 8004e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e24:	f000 b8dc 	b.w	8004fe0 <__malloc_unlock>
 8004e28:	42a3      	cmp	r3, r4
 8004e2a:	d908      	bls.n	8004e3e <_free_r+0x42>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	1821      	adds	r1, r4, r0
 8004e30:	428b      	cmp	r3, r1
 8004e32:	bf01      	itttt	eq
 8004e34:	6819      	ldreq	r1, [r3, #0]
 8004e36:	685b      	ldreq	r3, [r3, #4]
 8004e38:	1809      	addeq	r1, r1, r0
 8004e3a:	6021      	streq	r1, [r4, #0]
 8004e3c:	e7ed      	b.n	8004e1a <_free_r+0x1e>
 8004e3e:	461a      	mov	r2, r3
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	b10b      	cbz	r3, 8004e48 <_free_r+0x4c>
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	d9fa      	bls.n	8004e3e <_free_r+0x42>
 8004e48:	6811      	ldr	r1, [r2, #0]
 8004e4a:	1850      	adds	r0, r2, r1
 8004e4c:	42a0      	cmp	r0, r4
 8004e4e:	d10b      	bne.n	8004e68 <_free_r+0x6c>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	4401      	add	r1, r0
 8004e54:	1850      	adds	r0, r2, r1
 8004e56:	4283      	cmp	r3, r0
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	d1e0      	bne.n	8004e1e <_free_r+0x22>
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	6053      	str	r3, [r2, #4]
 8004e62:	4408      	add	r0, r1
 8004e64:	6010      	str	r0, [r2, #0]
 8004e66:	e7da      	b.n	8004e1e <_free_r+0x22>
 8004e68:	d902      	bls.n	8004e70 <_free_r+0x74>
 8004e6a:	230c      	movs	r3, #12
 8004e6c:	602b      	str	r3, [r5, #0]
 8004e6e:	e7d6      	b.n	8004e1e <_free_r+0x22>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	1821      	adds	r1, r4, r0
 8004e74:	428b      	cmp	r3, r1
 8004e76:	bf04      	itt	eq
 8004e78:	6819      	ldreq	r1, [r3, #0]
 8004e7a:	685b      	ldreq	r3, [r3, #4]
 8004e7c:	6063      	str	r3, [r4, #4]
 8004e7e:	bf04      	itt	eq
 8004e80:	1809      	addeq	r1, r1, r0
 8004e82:	6021      	streq	r1, [r4, #0]
 8004e84:	6054      	str	r4, [r2, #4]
 8004e86:	e7ca      	b.n	8004e1e <_free_r+0x22>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	2000042c 	.word	0x2000042c

08004e90 <sbrk_aligned>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	4e0f      	ldr	r6, [pc, #60]	@ (8004ed0 <sbrk_aligned+0x40>)
 8004e94:	460c      	mov	r4, r1
 8004e96:	6831      	ldr	r1, [r6, #0]
 8004e98:	4605      	mov	r5, r0
 8004e9a:	b911      	cbnz	r1, 8004ea2 <sbrk_aligned+0x12>
 8004e9c:	f000 fba6 	bl	80055ec <_sbrk_r>
 8004ea0:	6030      	str	r0, [r6, #0]
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f000 fba1 	bl	80055ec <_sbrk_r>
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	d103      	bne.n	8004eb6 <sbrk_aligned+0x26>
 8004eae:	f04f 34ff 	mov.w	r4, #4294967295
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
 8004eb6:	1cc4      	adds	r4, r0, #3
 8004eb8:	f024 0403 	bic.w	r4, r4, #3
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d0f8      	beq.n	8004eb2 <sbrk_aligned+0x22>
 8004ec0:	1a21      	subs	r1, r4, r0
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 fb92 	bl	80055ec <_sbrk_r>
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d1f2      	bne.n	8004eb2 <sbrk_aligned+0x22>
 8004ecc:	e7ef      	b.n	8004eae <sbrk_aligned+0x1e>
 8004ece:	bf00      	nop
 8004ed0:	20000428 	.word	0x20000428

08004ed4 <_malloc_r>:
 8004ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed8:	1ccd      	adds	r5, r1, #3
 8004eda:	f025 0503 	bic.w	r5, r5, #3
 8004ede:	3508      	adds	r5, #8
 8004ee0:	2d0c      	cmp	r5, #12
 8004ee2:	bf38      	it	cc
 8004ee4:	250c      	movcc	r5, #12
 8004ee6:	2d00      	cmp	r5, #0
 8004ee8:	4606      	mov	r6, r0
 8004eea:	db01      	blt.n	8004ef0 <_malloc_r+0x1c>
 8004eec:	42a9      	cmp	r1, r5
 8004eee:	d904      	bls.n	8004efa <_malloc_r+0x26>
 8004ef0:	230c      	movs	r3, #12
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004efa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fd0 <_malloc_r+0xfc>
 8004efe:	f000 f869 	bl	8004fd4 <__malloc_lock>
 8004f02:	f8d8 3000 	ldr.w	r3, [r8]
 8004f06:	461c      	mov	r4, r3
 8004f08:	bb44      	cbnz	r4, 8004f5c <_malloc_r+0x88>
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff ffbf 	bl	8004e90 <sbrk_aligned>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	4604      	mov	r4, r0
 8004f16:	d158      	bne.n	8004fca <_malloc_r+0xf6>
 8004f18:	f8d8 4000 	ldr.w	r4, [r8]
 8004f1c:	4627      	mov	r7, r4
 8004f1e:	2f00      	cmp	r7, #0
 8004f20:	d143      	bne.n	8004faa <_malloc_r+0xd6>
 8004f22:	2c00      	cmp	r4, #0
 8004f24:	d04b      	beq.n	8004fbe <_malloc_r+0xea>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	4639      	mov	r1, r7
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	eb04 0903 	add.w	r9, r4, r3
 8004f30:	f000 fb5c 	bl	80055ec <_sbrk_r>
 8004f34:	4581      	cmp	r9, r0
 8004f36:	d142      	bne.n	8004fbe <_malloc_r+0xea>
 8004f38:	6821      	ldr	r1, [r4, #0]
 8004f3a:	1a6d      	subs	r5, r5, r1
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f7ff ffa6 	bl	8004e90 <sbrk_aligned>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d03a      	beq.n	8004fbe <_malloc_r+0xea>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	442b      	add	r3, r5
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	bb62      	cbnz	r2, 8004fb0 <_malloc_r+0xdc>
 8004f56:	f8c8 7000 	str.w	r7, [r8]
 8004f5a:	e00f      	b.n	8004f7c <_malloc_r+0xa8>
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	1b52      	subs	r2, r2, r5
 8004f60:	d420      	bmi.n	8004fa4 <_malloc_r+0xd0>
 8004f62:	2a0b      	cmp	r2, #11
 8004f64:	d917      	bls.n	8004f96 <_malloc_r+0xc2>
 8004f66:	1961      	adds	r1, r4, r5
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	6025      	str	r5, [r4, #0]
 8004f6c:	bf18      	it	ne
 8004f6e:	6059      	strne	r1, [r3, #4]
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	bf08      	it	eq
 8004f74:	f8c8 1000 	streq.w	r1, [r8]
 8004f78:	5162      	str	r2, [r4, r5]
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 f82f 	bl	8004fe0 <__malloc_unlock>
 8004f82:	f104 000b 	add.w	r0, r4, #11
 8004f86:	1d23      	adds	r3, r4, #4
 8004f88:	f020 0007 	bic.w	r0, r0, #7
 8004f8c:	1ac2      	subs	r2, r0, r3
 8004f8e:	bf1c      	itt	ne
 8004f90:	1a1b      	subne	r3, r3, r0
 8004f92:	50a3      	strne	r3, [r4, r2]
 8004f94:	e7af      	b.n	8004ef6 <_malloc_r+0x22>
 8004f96:	6862      	ldr	r2, [r4, #4]
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	bf0c      	ite	eq
 8004f9c:	f8c8 2000 	streq.w	r2, [r8]
 8004fa0:	605a      	strne	r2, [r3, #4]
 8004fa2:	e7eb      	b.n	8004f7c <_malloc_r+0xa8>
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	6864      	ldr	r4, [r4, #4]
 8004fa8:	e7ae      	b.n	8004f08 <_malloc_r+0x34>
 8004faa:	463c      	mov	r4, r7
 8004fac:	687f      	ldr	r7, [r7, #4]
 8004fae:	e7b6      	b.n	8004f1e <_malloc_r+0x4a>
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	d1fb      	bne.n	8004fb0 <_malloc_r+0xdc>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	6053      	str	r3, [r2, #4]
 8004fbc:	e7de      	b.n	8004f7c <_malloc_r+0xa8>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	6033      	str	r3, [r6, #0]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f000 f80c 	bl	8004fe0 <__malloc_unlock>
 8004fc8:	e794      	b.n	8004ef4 <_malloc_r+0x20>
 8004fca:	6005      	str	r5, [r0, #0]
 8004fcc:	e7d6      	b.n	8004f7c <_malloc_r+0xa8>
 8004fce:	bf00      	nop
 8004fd0:	2000042c 	.word	0x2000042c

08004fd4 <__malloc_lock>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	@ (8004fdc <__malloc_lock+0x8>)
 8004fd6:	f7ff bf0f 	b.w	8004df8 <__retarget_lock_acquire_recursive>
 8004fda:	bf00      	nop
 8004fdc:	20000424 	.word	0x20000424

08004fe0 <__malloc_unlock>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	@ (8004fe8 <__malloc_unlock+0x8>)
 8004fe2:	f7ff bf0a 	b.w	8004dfa <__retarget_lock_release_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	20000424 	.word	0x20000424

08004fec <__ssputs_r>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	688e      	ldr	r6, [r1, #8]
 8004ff2:	461f      	mov	r7, r3
 8004ff4:	42be      	cmp	r6, r7
 8004ff6:	680b      	ldr	r3, [r1, #0]
 8004ff8:	4682      	mov	sl, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	4690      	mov	r8, r2
 8004ffe:	d82d      	bhi.n	800505c <__ssputs_r+0x70>
 8005000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005008:	d026      	beq.n	8005058 <__ssputs_r+0x6c>
 800500a:	6965      	ldr	r5, [r4, #20]
 800500c:	6909      	ldr	r1, [r1, #16]
 800500e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005012:	eba3 0901 	sub.w	r9, r3, r1
 8005016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800501a:	1c7b      	adds	r3, r7, #1
 800501c:	444b      	add	r3, r9
 800501e:	106d      	asrs	r5, r5, #1
 8005020:	429d      	cmp	r5, r3
 8005022:	bf38      	it	cc
 8005024:	461d      	movcc	r5, r3
 8005026:	0553      	lsls	r3, r2, #21
 8005028:	d527      	bpl.n	800507a <__ssputs_r+0x8e>
 800502a:	4629      	mov	r1, r5
 800502c:	f7ff ff52 	bl	8004ed4 <_malloc_r>
 8005030:	4606      	mov	r6, r0
 8005032:	b360      	cbz	r0, 800508e <__ssputs_r+0xa2>
 8005034:	6921      	ldr	r1, [r4, #16]
 8005036:	464a      	mov	r2, r9
 8005038:	f000 fae8 	bl	800560c <memcpy>
 800503c:	89a3      	ldrh	r3, [r4, #12]
 800503e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005046:	81a3      	strh	r3, [r4, #12]
 8005048:	6126      	str	r6, [r4, #16]
 800504a:	6165      	str	r5, [r4, #20]
 800504c:	444e      	add	r6, r9
 800504e:	eba5 0509 	sub.w	r5, r5, r9
 8005052:	6026      	str	r6, [r4, #0]
 8005054:	60a5      	str	r5, [r4, #8]
 8005056:	463e      	mov	r6, r7
 8005058:	42be      	cmp	r6, r7
 800505a:	d900      	bls.n	800505e <__ssputs_r+0x72>
 800505c:	463e      	mov	r6, r7
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	4632      	mov	r2, r6
 8005062:	4641      	mov	r1, r8
 8005064:	f000 faa8 	bl	80055b8 <memmove>
 8005068:	68a3      	ldr	r3, [r4, #8]
 800506a:	1b9b      	subs	r3, r3, r6
 800506c:	60a3      	str	r3, [r4, #8]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	4433      	add	r3, r6
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	2000      	movs	r0, #0
 8005076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507a:	462a      	mov	r2, r5
 800507c:	f000 fad4 	bl	8005628 <_realloc_r>
 8005080:	4606      	mov	r6, r0
 8005082:	2800      	cmp	r0, #0
 8005084:	d1e0      	bne.n	8005048 <__ssputs_r+0x5c>
 8005086:	6921      	ldr	r1, [r4, #16]
 8005088:	4650      	mov	r0, sl
 800508a:	f7ff feb7 	bl	8004dfc <_free_r>
 800508e:	230c      	movs	r3, #12
 8005090:	f8ca 3000 	str.w	r3, [sl]
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800509a:	81a3      	strh	r3, [r4, #12]
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	e7e9      	b.n	8005076 <__ssputs_r+0x8a>
	...

080050a4 <_svfiprintf_r>:
 80050a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a8:	4698      	mov	r8, r3
 80050aa:	898b      	ldrh	r3, [r1, #12]
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	b09d      	sub	sp, #116	@ 0x74
 80050b0:	4607      	mov	r7, r0
 80050b2:	460d      	mov	r5, r1
 80050b4:	4614      	mov	r4, r2
 80050b6:	d510      	bpl.n	80050da <_svfiprintf_r+0x36>
 80050b8:	690b      	ldr	r3, [r1, #16]
 80050ba:	b973      	cbnz	r3, 80050da <_svfiprintf_r+0x36>
 80050bc:	2140      	movs	r1, #64	@ 0x40
 80050be:	f7ff ff09 	bl	8004ed4 <_malloc_r>
 80050c2:	6028      	str	r0, [r5, #0]
 80050c4:	6128      	str	r0, [r5, #16]
 80050c6:	b930      	cbnz	r0, 80050d6 <_svfiprintf_r+0x32>
 80050c8:	230c      	movs	r3, #12
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	b01d      	add	sp, #116	@ 0x74
 80050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d6:	2340      	movs	r3, #64	@ 0x40
 80050d8:	616b      	str	r3, [r5, #20]
 80050da:	2300      	movs	r3, #0
 80050dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80050de:	2320      	movs	r3, #32
 80050e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050e8:	2330      	movs	r3, #48	@ 0x30
 80050ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005288 <_svfiprintf_r+0x1e4>
 80050ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050f2:	f04f 0901 	mov.w	r9, #1
 80050f6:	4623      	mov	r3, r4
 80050f8:	469a      	mov	sl, r3
 80050fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050fe:	b10a      	cbz	r2, 8005104 <_svfiprintf_r+0x60>
 8005100:	2a25      	cmp	r2, #37	@ 0x25
 8005102:	d1f9      	bne.n	80050f8 <_svfiprintf_r+0x54>
 8005104:	ebba 0b04 	subs.w	fp, sl, r4
 8005108:	d00b      	beq.n	8005122 <_svfiprintf_r+0x7e>
 800510a:	465b      	mov	r3, fp
 800510c:	4622      	mov	r2, r4
 800510e:	4629      	mov	r1, r5
 8005110:	4638      	mov	r0, r7
 8005112:	f7ff ff6b 	bl	8004fec <__ssputs_r>
 8005116:	3001      	adds	r0, #1
 8005118:	f000 80a7 	beq.w	800526a <_svfiprintf_r+0x1c6>
 800511c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800511e:	445a      	add	r2, fp
 8005120:	9209      	str	r2, [sp, #36]	@ 0x24
 8005122:	f89a 3000 	ldrb.w	r3, [sl]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 809f 	beq.w	800526a <_svfiprintf_r+0x1c6>
 800512c:	2300      	movs	r3, #0
 800512e:	f04f 32ff 	mov.w	r2, #4294967295
 8005132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005136:	f10a 0a01 	add.w	sl, sl, #1
 800513a:	9304      	str	r3, [sp, #16]
 800513c:	9307      	str	r3, [sp, #28]
 800513e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005142:	931a      	str	r3, [sp, #104]	@ 0x68
 8005144:	4654      	mov	r4, sl
 8005146:	2205      	movs	r2, #5
 8005148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800514c:	484e      	ldr	r0, [pc, #312]	@ (8005288 <_svfiprintf_r+0x1e4>)
 800514e:	f7fb f847 	bl	80001e0 <memchr>
 8005152:	9a04      	ldr	r2, [sp, #16]
 8005154:	b9d8      	cbnz	r0, 800518e <_svfiprintf_r+0xea>
 8005156:	06d0      	lsls	r0, r2, #27
 8005158:	bf44      	itt	mi
 800515a:	2320      	movmi	r3, #32
 800515c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005160:	0711      	lsls	r1, r2, #28
 8005162:	bf44      	itt	mi
 8005164:	232b      	movmi	r3, #43	@ 0x2b
 8005166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800516a:	f89a 3000 	ldrb.w	r3, [sl]
 800516e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005170:	d015      	beq.n	800519e <_svfiprintf_r+0xfa>
 8005172:	9a07      	ldr	r2, [sp, #28]
 8005174:	4654      	mov	r4, sl
 8005176:	2000      	movs	r0, #0
 8005178:	f04f 0c0a 	mov.w	ip, #10
 800517c:	4621      	mov	r1, r4
 800517e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005182:	3b30      	subs	r3, #48	@ 0x30
 8005184:	2b09      	cmp	r3, #9
 8005186:	d94b      	bls.n	8005220 <_svfiprintf_r+0x17c>
 8005188:	b1b0      	cbz	r0, 80051b8 <_svfiprintf_r+0x114>
 800518a:	9207      	str	r2, [sp, #28]
 800518c:	e014      	b.n	80051b8 <_svfiprintf_r+0x114>
 800518e:	eba0 0308 	sub.w	r3, r0, r8
 8005192:	fa09 f303 	lsl.w	r3, r9, r3
 8005196:	4313      	orrs	r3, r2
 8005198:	9304      	str	r3, [sp, #16]
 800519a:	46a2      	mov	sl, r4
 800519c:	e7d2      	b.n	8005144 <_svfiprintf_r+0xa0>
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	1d19      	adds	r1, r3, #4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	9103      	str	r1, [sp, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bfbb      	ittet	lt
 80051aa:	425b      	neglt	r3, r3
 80051ac:	f042 0202 	orrlt.w	r2, r2, #2
 80051b0:	9307      	strge	r3, [sp, #28]
 80051b2:	9307      	strlt	r3, [sp, #28]
 80051b4:	bfb8      	it	lt
 80051b6:	9204      	strlt	r2, [sp, #16]
 80051b8:	7823      	ldrb	r3, [r4, #0]
 80051ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80051bc:	d10a      	bne.n	80051d4 <_svfiprintf_r+0x130>
 80051be:	7863      	ldrb	r3, [r4, #1]
 80051c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80051c2:	d132      	bne.n	800522a <_svfiprintf_r+0x186>
 80051c4:	9b03      	ldr	r3, [sp, #12]
 80051c6:	1d1a      	adds	r2, r3, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	9203      	str	r2, [sp, #12]
 80051cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051d0:	3402      	adds	r4, #2
 80051d2:	9305      	str	r3, [sp, #20]
 80051d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005298 <_svfiprintf_r+0x1f4>
 80051d8:	7821      	ldrb	r1, [r4, #0]
 80051da:	2203      	movs	r2, #3
 80051dc:	4650      	mov	r0, sl
 80051de:	f7fa ffff 	bl	80001e0 <memchr>
 80051e2:	b138      	cbz	r0, 80051f4 <_svfiprintf_r+0x150>
 80051e4:	9b04      	ldr	r3, [sp, #16]
 80051e6:	eba0 000a 	sub.w	r0, r0, sl
 80051ea:	2240      	movs	r2, #64	@ 0x40
 80051ec:	4082      	lsls	r2, r0
 80051ee:	4313      	orrs	r3, r2
 80051f0:	3401      	adds	r4, #1
 80051f2:	9304      	str	r3, [sp, #16]
 80051f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f8:	4824      	ldr	r0, [pc, #144]	@ (800528c <_svfiprintf_r+0x1e8>)
 80051fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051fe:	2206      	movs	r2, #6
 8005200:	f7fa ffee 	bl	80001e0 <memchr>
 8005204:	2800      	cmp	r0, #0
 8005206:	d036      	beq.n	8005276 <_svfiprintf_r+0x1d2>
 8005208:	4b21      	ldr	r3, [pc, #132]	@ (8005290 <_svfiprintf_r+0x1ec>)
 800520a:	bb1b      	cbnz	r3, 8005254 <_svfiprintf_r+0x1b0>
 800520c:	9b03      	ldr	r3, [sp, #12]
 800520e:	3307      	adds	r3, #7
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	3308      	adds	r3, #8
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800521a:	4433      	add	r3, r6
 800521c:	9309      	str	r3, [sp, #36]	@ 0x24
 800521e:	e76a      	b.n	80050f6 <_svfiprintf_r+0x52>
 8005220:	fb0c 3202 	mla	r2, ip, r2, r3
 8005224:	460c      	mov	r4, r1
 8005226:	2001      	movs	r0, #1
 8005228:	e7a8      	b.n	800517c <_svfiprintf_r+0xd8>
 800522a:	2300      	movs	r3, #0
 800522c:	3401      	adds	r4, #1
 800522e:	9305      	str	r3, [sp, #20]
 8005230:	4619      	mov	r1, r3
 8005232:	f04f 0c0a 	mov.w	ip, #10
 8005236:	4620      	mov	r0, r4
 8005238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800523c:	3a30      	subs	r2, #48	@ 0x30
 800523e:	2a09      	cmp	r2, #9
 8005240:	d903      	bls.n	800524a <_svfiprintf_r+0x1a6>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0c6      	beq.n	80051d4 <_svfiprintf_r+0x130>
 8005246:	9105      	str	r1, [sp, #20]
 8005248:	e7c4      	b.n	80051d4 <_svfiprintf_r+0x130>
 800524a:	fb0c 2101 	mla	r1, ip, r1, r2
 800524e:	4604      	mov	r4, r0
 8005250:	2301      	movs	r3, #1
 8005252:	e7f0      	b.n	8005236 <_svfiprintf_r+0x192>
 8005254:	ab03      	add	r3, sp, #12
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	462a      	mov	r2, r5
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <_svfiprintf_r+0x1f0>)
 800525c:	a904      	add	r1, sp, #16
 800525e:	4638      	mov	r0, r7
 8005260:	f3af 8000 	nop.w
 8005264:	1c42      	adds	r2, r0, #1
 8005266:	4606      	mov	r6, r0
 8005268:	d1d6      	bne.n	8005218 <_svfiprintf_r+0x174>
 800526a:	89ab      	ldrh	r3, [r5, #12]
 800526c:	065b      	lsls	r3, r3, #25
 800526e:	f53f af2d 	bmi.w	80050cc <_svfiprintf_r+0x28>
 8005272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005274:	e72c      	b.n	80050d0 <_svfiprintf_r+0x2c>
 8005276:	ab03      	add	r3, sp, #12
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	462a      	mov	r2, r5
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <_svfiprintf_r+0x1f0>)
 800527e:	a904      	add	r1, sp, #16
 8005280:	4638      	mov	r0, r7
 8005282:	f000 f879 	bl	8005378 <_printf_i>
 8005286:	e7ed      	b.n	8005264 <_svfiprintf_r+0x1c0>
 8005288:	080056f8 	.word	0x080056f8
 800528c:	08005702 	.word	0x08005702
 8005290:	00000000 	.word	0x00000000
 8005294:	08004fed 	.word	0x08004fed
 8005298:	080056fe 	.word	0x080056fe

0800529c <_printf_common>:
 800529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	4616      	mov	r6, r2
 80052a2:	4698      	mov	r8, r3
 80052a4:	688a      	ldr	r2, [r1, #8]
 80052a6:	690b      	ldr	r3, [r1, #16]
 80052a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bfb8      	it	lt
 80052b0:	4613      	movlt	r3, r2
 80052b2:	6033      	str	r3, [r6, #0]
 80052b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052b8:	4607      	mov	r7, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	b10a      	cbz	r2, 80052c2 <_printf_common+0x26>
 80052be:	3301      	adds	r3, #1
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	0699      	lsls	r1, r3, #26
 80052c6:	bf42      	ittt	mi
 80052c8:	6833      	ldrmi	r3, [r6, #0]
 80052ca:	3302      	addmi	r3, #2
 80052cc:	6033      	strmi	r3, [r6, #0]
 80052ce:	6825      	ldr	r5, [r4, #0]
 80052d0:	f015 0506 	ands.w	r5, r5, #6
 80052d4:	d106      	bne.n	80052e4 <_printf_common+0x48>
 80052d6:	f104 0a19 	add.w	sl, r4, #25
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	6832      	ldr	r2, [r6, #0]
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	42ab      	cmp	r3, r5
 80052e2:	dc26      	bgt.n	8005332 <_printf_common+0x96>
 80052e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	3b00      	subs	r3, #0
 80052ec:	bf18      	it	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	0692      	lsls	r2, r2, #26
 80052f2:	d42b      	bmi.n	800534c <_printf_common+0xb0>
 80052f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052f8:	4641      	mov	r1, r8
 80052fa:	4638      	mov	r0, r7
 80052fc:	47c8      	blx	r9
 80052fe:	3001      	adds	r0, #1
 8005300:	d01e      	beq.n	8005340 <_printf_common+0xa4>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	f003 0306 	and.w	r3, r3, #6
 800530a:	2b04      	cmp	r3, #4
 800530c:	bf02      	ittt	eq
 800530e:	68e5      	ldreq	r5, [r4, #12]
 8005310:	6833      	ldreq	r3, [r6, #0]
 8005312:	1aed      	subeq	r5, r5, r3
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	bf0c      	ite	eq
 8005318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800531c:	2500      	movne	r5, #0
 800531e:	4293      	cmp	r3, r2
 8005320:	bfc4      	itt	gt
 8005322:	1a9b      	subgt	r3, r3, r2
 8005324:	18ed      	addgt	r5, r5, r3
 8005326:	2600      	movs	r6, #0
 8005328:	341a      	adds	r4, #26
 800532a:	42b5      	cmp	r5, r6
 800532c:	d11a      	bne.n	8005364 <_printf_common+0xc8>
 800532e:	2000      	movs	r0, #0
 8005330:	e008      	b.n	8005344 <_printf_common+0xa8>
 8005332:	2301      	movs	r3, #1
 8005334:	4652      	mov	r2, sl
 8005336:	4641      	mov	r1, r8
 8005338:	4638      	mov	r0, r7
 800533a:	47c8      	blx	r9
 800533c:	3001      	adds	r0, #1
 800533e:	d103      	bne.n	8005348 <_printf_common+0xac>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005348:	3501      	adds	r5, #1
 800534a:	e7c6      	b.n	80052da <_printf_common+0x3e>
 800534c:	18e1      	adds	r1, r4, r3
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	2030      	movs	r0, #48	@ 0x30
 8005352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005356:	4422      	add	r2, r4
 8005358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800535c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005360:	3302      	adds	r3, #2
 8005362:	e7c7      	b.n	80052f4 <_printf_common+0x58>
 8005364:	2301      	movs	r3, #1
 8005366:	4622      	mov	r2, r4
 8005368:	4641      	mov	r1, r8
 800536a:	4638      	mov	r0, r7
 800536c:	47c8      	blx	r9
 800536e:	3001      	adds	r0, #1
 8005370:	d0e6      	beq.n	8005340 <_printf_common+0xa4>
 8005372:	3601      	adds	r6, #1
 8005374:	e7d9      	b.n	800532a <_printf_common+0x8e>
	...

08005378 <_printf_i>:
 8005378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800537c:	7e0f      	ldrb	r7, [r1, #24]
 800537e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005380:	2f78      	cmp	r7, #120	@ 0x78
 8005382:	4691      	mov	r9, r2
 8005384:	4680      	mov	r8, r0
 8005386:	460c      	mov	r4, r1
 8005388:	469a      	mov	sl, r3
 800538a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800538e:	d807      	bhi.n	80053a0 <_printf_i+0x28>
 8005390:	2f62      	cmp	r7, #98	@ 0x62
 8005392:	d80a      	bhi.n	80053aa <_printf_i+0x32>
 8005394:	2f00      	cmp	r7, #0
 8005396:	f000 80d2 	beq.w	800553e <_printf_i+0x1c6>
 800539a:	2f58      	cmp	r7, #88	@ 0x58
 800539c:	f000 80b9 	beq.w	8005512 <_printf_i+0x19a>
 80053a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053a8:	e03a      	b.n	8005420 <_printf_i+0xa8>
 80053aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053ae:	2b15      	cmp	r3, #21
 80053b0:	d8f6      	bhi.n	80053a0 <_printf_i+0x28>
 80053b2:	a101      	add	r1, pc, #4	@ (adr r1, 80053b8 <_printf_i+0x40>)
 80053b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005425 	.word	0x08005425
 80053c0:	080053a1 	.word	0x080053a1
 80053c4:	080053a1 	.word	0x080053a1
 80053c8:	080053a1 	.word	0x080053a1
 80053cc:	080053a1 	.word	0x080053a1
 80053d0:	08005425 	.word	0x08005425
 80053d4:	080053a1 	.word	0x080053a1
 80053d8:	080053a1 	.word	0x080053a1
 80053dc:	080053a1 	.word	0x080053a1
 80053e0:	080053a1 	.word	0x080053a1
 80053e4:	08005525 	.word	0x08005525
 80053e8:	0800544f 	.word	0x0800544f
 80053ec:	080054df 	.word	0x080054df
 80053f0:	080053a1 	.word	0x080053a1
 80053f4:	080053a1 	.word	0x080053a1
 80053f8:	08005547 	.word	0x08005547
 80053fc:	080053a1 	.word	0x080053a1
 8005400:	0800544f 	.word	0x0800544f
 8005404:	080053a1 	.word	0x080053a1
 8005408:	080053a1 	.word	0x080053a1
 800540c:	080054e7 	.word	0x080054e7
 8005410:	6833      	ldr	r3, [r6, #0]
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6032      	str	r2, [r6, #0]
 8005418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800541c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005420:	2301      	movs	r3, #1
 8005422:	e09d      	b.n	8005560 <_printf_i+0x1e8>
 8005424:	6833      	ldr	r3, [r6, #0]
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	1d19      	adds	r1, r3, #4
 800542a:	6031      	str	r1, [r6, #0]
 800542c:	0606      	lsls	r6, r0, #24
 800542e:	d501      	bpl.n	8005434 <_printf_i+0xbc>
 8005430:	681d      	ldr	r5, [r3, #0]
 8005432:	e003      	b.n	800543c <_printf_i+0xc4>
 8005434:	0645      	lsls	r5, r0, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0xb8>
 8005438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800543c:	2d00      	cmp	r5, #0
 800543e:	da03      	bge.n	8005448 <_printf_i+0xd0>
 8005440:	232d      	movs	r3, #45	@ 0x2d
 8005442:	426d      	negs	r5, r5
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005448:	4859      	ldr	r0, [pc, #356]	@ (80055b0 <_printf_i+0x238>)
 800544a:	230a      	movs	r3, #10
 800544c:	e011      	b.n	8005472 <_printf_i+0xfa>
 800544e:	6821      	ldr	r1, [r4, #0]
 8005450:	6833      	ldr	r3, [r6, #0]
 8005452:	0608      	lsls	r0, r1, #24
 8005454:	f853 5b04 	ldr.w	r5, [r3], #4
 8005458:	d402      	bmi.n	8005460 <_printf_i+0xe8>
 800545a:	0649      	lsls	r1, r1, #25
 800545c:	bf48      	it	mi
 800545e:	b2ad      	uxthmi	r5, r5
 8005460:	2f6f      	cmp	r7, #111	@ 0x6f
 8005462:	4853      	ldr	r0, [pc, #332]	@ (80055b0 <_printf_i+0x238>)
 8005464:	6033      	str	r3, [r6, #0]
 8005466:	bf14      	ite	ne
 8005468:	230a      	movne	r3, #10
 800546a:	2308      	moveq	r3, #8
 800546c:	2100      	movs	r1, #0
 800546e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005472:	6866      	ldr	r6, [r4, #4]
 8005474:	60a6      	str	r6, [r4, #8]
 8005476:	2e00      	cmp	r6, #0
 8005478:	bfa2      	ittt	ge
 800547a:	6821      	ldrge	r1, [r4, #0]
 800547c:	f021 0104 	bicge.w	r1, r1, #4
 8005480:	6021      	strge	r1, [r4, #0]
 8005482:	b90d      	cbnz	r5, 8005488 <_printf_i+0x110>
 8005484:	2e00      	cmp	r6, #0
 8005486:	d04b      	beq.n	8005520 <_printf_i+0x1a8>
 8005488:	4616      	mov	r6, r2
 800548a:	fbb5 f1f3 	udiv	r1, r5, r3
 800548e:	fb03 5711 	mls	r7, r3, r1, r5
 8005492:	5dc7      	ldrb	r7, [r0, r7]
 8005494:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005498:	462f      	mov	r7, r5
 800549a:	42bb      	cmp	r3, r7
 800549c:	460d      	mov	r5, r1
 800549e:	d9f4      	bls.n	800548a <_printf_i+0x112>
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d10b      	bne.n	80054bc <_printf_i+0x144>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	07df      	lsls	r7, r3, #31
 80054a8:	d508      	bpl.n	80054bc <_printf_i+0x144>
 80054aa:	6923      	ldr	r3, [r4, #16]
 80054ac:	6861      	ldr	r1, [r4, #4]
 80054ae:	4299      	cmp	r1, r3
 80054b0:	bfde      	ittt	le
 80054b2:	2330      	movle	r3, #48	@ 0x30
 80054b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054bc:	1b92      	subs	r2, r2, r6
 80054be:	6122      	str	r2, [r4, #16]
 80054c0:	f8cd a000 	str.w	sl, [sp]
 80054c4:	464b      	mov	r3, r9
 80054c6:	aa03      	add	r2, sp, #12
 80054c8:	4621      	mov	r1, r4
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fee6 	bl	800529c <_printf_common>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d14a      	bne.n	800556a <_printf_i+0x1f2>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	b004      	add	sp, #16
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	f043 0320 	orr.w	r3, r3, #32
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	4833      	ldr	r0, [pc, #204]	@ (80055b4 <_printf_i+0x23c>)
 80054e8:	2778      	movs	r7, #120	@ 0x78
 80054ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6831      	ldr	r1, [r6, #0]
 80054f2:	061f      	lsls	r7, r3, #24
 80054f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80054f8:	d402      	bmi.n	8005500 <_printf_i+0x188>
 80054fa:	065f      	lsls	r7, r3, #25
 80054fc:	bf48      	it	mi
 80054fe:	b2ad      	uxthmi	r5, r5
 8005500:	6031      	str	r1, [r6, #0]
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	bf44      	itt	mi
 8005506:	f043 0320 	orrmi.w	r3, r3, #32
 800550a:	6023      	strmi	r3, [r4, #0]
 800550c:	b11d      	cbz	r5, 8005516 <_printf_i+0x19e>
 800550e:	2310      	movs	r3, #16
 8005510:	e7ac      	b.n	800546c <_printf_i+0xf4>
 8005512:	4827      	ldr	r0, [pc, #156]	@ (80055b0 <_printf_i+0x238>)
 8005514:	e7e9      	b.n	80054ea <_printf_i+0x172>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	f023 0320 	bic.w	r3, r3, #32
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	e7f6      	b.n	800550e <_printf_i+0x196>
 8005520:	4616      	mov	r6, r2
 8005522:	e7bd      	b.n	80054a0 <_printf_i+0x128>
 8005524:	6833      	ldr	r3, [r6, #0]
 8005526:	6825      	ldr	r5, [r4, #0]
 8005528:	6961      	ldr	r1, [r4, #20]
 800552a:	1d18      	adds	r0, r3, #4
 800552c:	6030      	str	r0, [r6, #0]
 800552e:	062e      	lsls	r6, r5, #24
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	d501      	bpl.n	8005538 <_printf_i+0x1c0>
 8005534:	6019      	str	r1, [r3, #0]
 8005536:	e002      	b.n	800553e <_printf_i+0x1c6>
 8005538:	0668      	lsls	r0, r5, #25
 800553a:	d5fb      	bpl.n	8005534 <_printf_i+0x1bc>
 800553c:	8019      	strh	r1, [r3, #0]
 800553e:	2300      	movs	r3, #0
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	4616      	mov	r6, r2
 8005544:	e7bc      	b.n	80054c0 <_printf_i+0x148>
 8005546:	6833      	ldr	r3, [r6, #0]
 8005548:	1d1a      	adds	r2, r3, #4
 800554a:	6032      	str	r2, [r6, #0]
 800554c:	681e      	ldr	r6, [r3, #0]
 800554e:	6862      	ldr	r2, [r4, #4]
 8005550:	2100      	movs	r1, #0
 8005552:	4630      	mov	r0, r6
 8005554:	f7fa fe44 	bl	80001e0 <memchr>
 8005558:	b108      	cbz	r0, 800555e <_printf_i+0x1e6>
 800555a:	1b80      	subs	r0, r0, r6
 800555c:	6060      	str	r0, [r4, #4]
 800555e:	6863      	ldr	r3, [r4, #4]
 8005560:	6123      	str	r3, [r4, #16]
 8005562:	2300      	movs	r3, #0
 8005564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005568:	e7aa      	b.n	80054c0 <_printf_i+0x148>
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	4632      	mov	r2, r6
 800556e:	4649      	mov	r1, r9
 8005570:	4640      	mov	r0, r8
 8005572:	47d0      	blx	sl
 8005574:	3001      	adds	r0, #1
 8005576:	d0ad      	beq.n	80054d4 <_printf_i+0x15c>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	079b      	lsls	r3, r3, #30
 800557c:	d413      	bmi.n	80055a6 <_printf_i+0x22e>
 800557e:	68e0      	ldr	r0, [r4, #12]
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	4298      	cmp	r0, r3
 8005584:	bfb8      	it	lt
 8005586:	4618      	movlt	r0, r3
 8005588:	e7a6      	b.n	80054d8 <_printf_i+0x160>
 800558a:	2301      	movs	r3, #1
 800558c:	4632      	mov	r2, r6
 800558e:	4649      	mov	r1, r9
 8005590:	4640      	mov	r0, r8
 8005592:	47d0      	blx	sl
 8005594:	3001      	adds	r0, #1
 8005596:	d09d      	beq.n	80054d4 <_printf_i+0x15c>
 8005598:	3501      	adds	r5, #1
 800559a:	68e3      	ldr	r3, [r4, #12]
 800559c:	9903      	ldr	r1, [sp, #12]
 800559e:	1a5b      	subs	r3, r3, r1
 80055a0:	42ab      	cmp	r3, r5
 80055a2:	dcf2      	bgt.n	800558a <_printf_i+0x212>
 80055a4:	e7eb      	b.n	800557e <_printf_i+0x206>
 80055a6:	2500      	movs	r5, #0
 80055a8:	f104 0619 	add.w	r6, r4, #25
 80055ac:	e7f5      	b.n	800559a <_printf_i+0x222>
 80055ae:	bf00      	nop
 80055b0:	08005709 	.word	0x08005709
 80055b4:	0800571a 	.word	0x0800571a

080055b8 <memmove>:
 80055b8:	4288      	cmp	r0, r1
 80055ba:	b510      	push	{r4, lr}
 80055bc:	eb01 0402 	add.w	r4, r1, r2
 80055c0:	d902      	bls.n	80055c8 <memmove+0x10>
 80055c2:	4284      	cmp	r4, r0
 80055c4:	4623      	mov	r3, r4
 80055c6:	d807      	bhi.n	80055d8 <memmove+0x20>
 80055c8:	1e43      	subs	r3, r0, #1
 80055ca:	42a1      	cmp	r1, r4
 80055cc:	d008      	beq.n	80055e0 <memmove+0x28>
 80055ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055d6:	e7f8      	b.n	80055ca <memmove+0x12>
 80055d8:	4402      	add	r2, r0
 80055da:	4601      	mov	r1, r0
 80055dc:	428a      	cmp	r2, r1
 80055de:	d100      	bne.n	80055e2 <memmove+0x2a>
 80055e0:	bd10      	pop	{r4, pc}
 80055e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ea:	e7f7      	b.n	80055dc <memmove+0x24>

080055ec <_sbrk_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	4d06      	ldr	r5, [pc, #24]	@ (8005608 <_sbrk_r+0x1c>)
 80055f0:	2300      	movs	r3, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	4608      	mov	r0, r1
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	f7fc f860 	bl	80016bc <_sbrk>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_sbrk_r+0x1a>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_sbrk_r+0x1a>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20000420 	.word	0x20000420

0800560c <memcpy>:
 800560c:	440a      	add	r2, r1
 800560e:	4291      	cmp	r1, r2
 8005610:	f100 33ff 	add.w	r3, r0, #4294967295
 8005614:	d100      	bne.n	8005618 <memcpy+0xc>
 8005616:	4770      	bx	lr
 8005618:	b510      	push	{r4, lr}
 800561a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800561e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005622:	4291      	cmp	r1, r2
 8005624:	d1f9      	bne.n	800561a <memcpy+0xe>
 8005626:	bd10      	pop	{r4, pc}

08005628 <_realloc_r>:
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	4680      	mov	r8, r0
 800562e:	4615      	mov	r5, r2
 8005630:	460c      	mov	r4, r1
 8005632:	b921      	cbnz	r1, 800563e <_realloc_r+0x16>
 8005634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	4611      	mov	r1, r2
 800563a:	f7ff bc4b 	b.w	8004ed4 <_malloc_r>
 800563e:	b92a      	cbnz	r2, 800564c <_realloc_r+0x24>
 8005640:	f7ff fbdc 	bl	8004dfc <_free_r>
 8005644:	2400      	movs	r4, #0
 8005646:	4620      	mov	r0, r4
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	f000 f81a 	bl	8005684 <_malloc_usable_size_r>
 8005650:	4285      	cmp	r5, r0
 8005652:	4606      	mov	r6, r0
 8005654:	d802      	bhi.n	800565c <_realloc_r+0x34>
 8005656:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800565a:	d8f4      	bhi.n	8005646 <_realloc_r+0x1e>
 800565c:	4629      	mov	r1, r5
 800565e:	4640      	mov	r0, r8
 8005660:	f7ff fc38 	bl	8004ed4 <_malloc_r>
 8005664:	4607      	mov	r7, r0
 8005666:	2800      	cmp	r0, #0
 8005668:	d0ec      	beq.n	8005644 <_realloc_r+0x1c>
 800566a:	42b5      	cmp	r5, r6
 800566c:	462a      	mov	r2, r5
 800566e:	4621      	mov	r1, r4
 8005670:	bf28      	it	cs
 8005672:	4632      	movcs	r2, r6
 8005674:	f7ff ffca 	bl	800560c <memcpy>
 8005678:	4621      	mov	r1, r4
 800567a:	4640      	mov	r0, r8
 800567c:	f7ff fbbe 	bl	8004dfc <_free_r>
 8005680:	463c      	mov	r4, r7
 8005682:	e7e0      	b.n	8005646 <_realloc_r+0x1e>

08005684 <_malloc_usable_size_r>:
 8005684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005688:	1f18      	subs	r0, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	bfbc      	itt	lt
 800568e:	580b      	ldrlt	r3, [r1, r0]
 8005690:	18c0      	addlt	r0, r0, r3
 8005692:	4770      	bx	lr

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
