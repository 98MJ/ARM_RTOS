
20240423_button_led_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000242c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080025dc  080025dc  000035dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025e4  080025e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e4  080025e4  000035e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025e8  080025e8  000035e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080025f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080025f8  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a331  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a17  00000000  00000000  0000e36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0000fd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000772  00000000  00000000  00010718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001539f  00000000  00000000  00010e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce60  00000000  00000000  00026229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008459f  00000000  00000000  00033089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026cc  00000000  00000000  000b766c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b9d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080025ac 	.word	0x080025ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080025ac 	.word	0x080025ac

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc56 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f80a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8c8 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f89c 	bl	8000614 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004dc:	f000 f86c 	bl	80005b8 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  apMain();
 80004e0:	f000 fbae 	bl	8000c40 <apMain>
 80004e4:	e7fc      	b.n	80004e0 <main+0x18>
	...

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b094      	sub	sp, #80	@ 0x50
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2230      	movs	r2, #48	@ 0x30
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 f82c 	bl	8002554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	4b27      	ldr	r3, [pc, #156]	@ (80005b0 <SystemClock_Config+0xc8>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000514:	4a26      	ldr	r2, [pc, #152]	@ (80005b0 <SystemClock_Config+0xc8>)
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	@ 0x40
 800051c:	4b24      	ldr	r3, [pc, #144]	@ (80005b0 <SystemClock_Config+0xc8>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <SystemClock_Config+0xcc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a20      	ldr	r2, [pc, #128]	@ (80005b4 <SystemClock_Config+0xcc>)
 8000532:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <SystemClock_Config+0xcc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000544:	2301      	movs	r3, #1
 8000546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000548:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000558:	2304      	movs	r3, #4
 800055a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800055c:	2364      	movs	r3, #100	@ 0x64
 800055e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000560:	2302      	movs	r3, #2
 8000562:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0320 	add.w	r3, r7, #32
 800056c:	4618      	mov	r0, r3
 800056e:	f001 f895 	bl	800169c <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000578:	f000 f8e4 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2302      	movs	r3, #2
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2103      	movs	r1, #3
 8000598:	4618      	mov	r0, r3
 800059a:	f001 faf7 	bl	8001b8c <HAL_RCC_ClockConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005a4:	f000 f8ce 	bl	8000744 <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3750      	adds	r7, #80	@ 0x50
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40023800 	.word	0x40023800
 80005b4:	40007000 	.word	0x40007000

080005b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005be:	4a13      	ldr	r2, [pc, #76]	@ (800060c <MX_I2C1_Init+0x54>)
 80005c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005c4:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <MX_I2C1_Init+0x58>)
 80005c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <MX_I2C1_Init+0x50>)
 80005f6:	f000 ff0d 	bl	8001414 <HAL_I2C_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000600:	f000 f8a0 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000028 	.word	0x20000028
 800060c:	40005400 	.word	0x40005400
 8000610:	000186a0 	.word	0x000186a0

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f001 fcbe 	bl	8001fcc <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 f875 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000007c 	.word	0x2000007c
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <MX_GPIO_Init+0xd4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2d      	ldr	r2, [pc, #180]	@ (800073c <MX_GPIO_Init+0xd4>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <MX_GPIO_Init+0xd4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a26      	ldr	r2, [pc, #152]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a18      	ldr	r2, [pc, #96]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 80006f4:	4812      	ldr	r0, [pc, #72]	@ (8000740 <MX_GPIO_Init+0xd8>)
 80006f6:	f000 fe59 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80006fa:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	480b      	ldr	r0, [pc, #44]	@ (8000740 <MX_GPIO_Init+0xd8>)
 8000714:	f000 fcae 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000718:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_GPIO_Init+0xd8>)
 800072e:	f000 fca1 	bl	8001074 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	@ 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40020800 	.word	0x40020800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <HAL_I2C_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_I2C_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <HAL_I2C_MspInit+0x88>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_I2C_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f0:	2304      	movs	r3, #4
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <HAL_I2C_MspInit+0x8c>)
 80007fc:	f000 fc3a 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_I2C_MspInit+0x88>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <HAL_I2C_MspInit+0x88>)
 800080a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <HAL_I2C_MspInit+0x88>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <HAL_UART_MspInit+0x84>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12b      	bne.n	80008aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a10      	ldr	r2, [pc, #64]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800088a:	230c      	movs	r3, #12
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089a:	2307      	movs	r3, #7
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <HAL_UART_MspInit+0x8c>)
 80008a6:	f000 fbe5 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	@ 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40004400 	.word	0x40004400
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020000 	.word	0x40020000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sysTick_count();
 8000916:	f000 f841 	bl	800099c <sysTick_count>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 fa81 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <SystemInit+0x20>)
 800092a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <SystemInit+0x20>)
 8000930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000980 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800094c:	f7ff ffea 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000952:	490d      	ldr	r1, [pc, #52]	@ (8000988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0a      	ldr	r2, [pc, #40]	@ (8000990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000968:	4c0a      	ldr	r4, [pc, #40]	@ (8000994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f001 fdf5 	bl	8002564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097a:	f7ff fda5 	bl	80004c8 <main>
  bx  lr    
 800097e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000988:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800098c:	080025ec 	.word	0x080025ec
  ldr r2, =_sbss
 8000990:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000994:	20000108 	.word	0x20000108

08000998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC_IRQHandler>
	...

0800099c <sysTick_count>:
} case_t;
case_t state = case0;

uint16_t stateCount;

void sysTick_count(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	if (stateCount > 0) stateCount--;
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <sysTick_count+0x24>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <sysTick_count+0x18>
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <sysTick_count+0x24>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <sysTick_count+0x24>)
 80009b2:	801a      	strh	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000102 	.word	0x20000102

080009c4 <sys_init>:

void sys_init() {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	button_init(&redButton, GPIOC, GPIO_PIN_10);
 80009c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009cc:	4910      	ldr	r1, [pc, #64]	@ (8000a10 <sys_init+0x4c>)
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <sys_init+0x50>)
 80009d0:	f000 f95a 	bl	8000c88 <button_init>
	button_init(&yellowButton, GPIOC, GPIO_PIN_11);
 80009d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009d8:	490d      	ldr	r1, [pc, #52]	@ (8000a10 <sys_init+0x4c>)
 80009da:	480f      	ldr	r0, [pc, #60]	@ (8000a18 <sys_init+0x54>)
 80009dc:	f000 f954 	bl	8000c88 <button_init>
	button_init(&greenButton, GPIOC, GPIO_PIN_12);
 80009e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009e4:	490a      	ldr	r1, [pc, #40]	@ (8000a10 <sys_init+0x4c>)
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <sys_init+0x58>)
 80009e8:	f000 f94e 	bl	8000c88 <button_init>
	led_init(&redled, GPIOC, GPIO_PIN_8);
 80009ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009f0:	4907      	ldr	r1, [pc, #28]	@ (8000a10 <sys_init+0x4c>)
 80009f2:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <sys_init+0x5c>)
 80009f4:	f000 f98f 	bl	8000d16 <led_init>
	led_init(&yellowled, GPIOC, GPIO_PIN_6);
 80009f8:	2240      	movs	r2, #64	@ 0x40
 80009fa:	4905      	ldr	r1, [pc, #20]	@ (8000a10 <sys_init+0x4c>)
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <sys_init+0x60>)
 80009fe:	f000 f98a 	bl	8000d16 <led_init>
	led_init(&greenled, GPIOC, GPIO_PIN_5);
 8000a02:	2220      	movs	r2, #32
 8000a04:	4902      	ldr	r1, [pc, #8]	@ (8000a10 <sys_init+0x4c>)
 8000a06:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <sys_init+0x64>)
 8000a08:	f000 f985 	bl	8000d16 <led_init>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40020800 	.word	0x40020800
 8000a14:	200000c4 	.word	0x200000c4
 8000a18:	200000d0 	.word	0x200000d0
 8000a1c:	200000dc 	.word	0x200000dc
 8000a20:	200000e8 	.word	0x200000e8
 8000a24:	200000f0 	.word	0x200000f0
 8000a28:	200000f8 	.word	0x200000f8

08000a2c <ledAlloff>:

void ledAlloff(){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	led_off(&redled);
 8000a30:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <ledAlloff+0x1c>)
 8000a32:	f000 f983 	bl	8000d3c <led_off>
	led_off(&yellowled);
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <ledAlloff+0x20>)
 8000a38:	f000 f980 	bl	8000d3c <led_off>
	led_off(&greenled);
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <ledAlloff+0x24>)
 8000a3e:	f000 f97d 	bl	8000d3c <led_off>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000e8 	.word	0x200000e8
 8000a4c:	200000f0 	.word	0x200000f0
 8000a50:	200000f8 	.word	0x200000f8

08000a54 <ledState0>:

void ledState0() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	if (stateCount == 0) {
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <ledState0+0x70>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10c      	bne.n	8000a7a <ledState0+0x26>
		stateCount = 500;
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <ledState0+0x70>)
 8000a62:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a66:	801a      	strh	r2, [r3, #0]

		led_toggle(&redled);
 8000a68:	4817      	ldr	r0, [pc, #92]	@ (8000ac8 <ledState0+0x74>)
 8000a6a:	f000 f977 	bl	8000d5c <led_toggle>
		led_toggle(&yellowled);
 8000a6e:	4817      	ldr	r0, [pc, #92]	@ (8000acc <ledState0+0x78>)
 8000a70:	f000 f974 	bl	8000d5c <led_toggle>
		led_toggle(&greenled);
 8000a74:	4816      	ldr	r0, [pc, #88]	@ (8000ad0 <ledState0+0x7c>)
 8000a76:	f000 f971 	bl	8000d5c <led_toggle>
	}

	if (button_getState(&redButton) == ACT_RELEASED) {
 8000a7a:	4816      	ldr	r0, [pc, #88]	@ (8000ad4 <ledState0+0x80>)
 8000a7c:	f000 f91a 	bl	8000cb4 <button_getState>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d105      	bne.n	8000a92 <ledState0+0x3e>
		state=case1;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <ledState0+0x84>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000a8c:	f7ff ffce 	bl	8000a2c <ledAlloff>
		state=case3;
		ledAlloff();
	}


}
 8000a90:	e016      	b.n	8000ac0 <ledState0+0x6c>
	else if (button_getState(&yellowButton) == ACT_RELEASED) {
 8000a92:	4812      	ldr	r0, [pc, #72]	@ (8000adc <ledState0+0x88>)
 8000a94:	f000 f90e 	bl	8000cb4 <button_getState>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d105      	bne.n	8000aaa <ledState0+0x56>
		state=case2;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <ledState0+0x84>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000aa4:	f7ff ffc2 	bl	8000a2c <ledAlloff>
}
 8000aa8:	e00a      	b.n	8000ac0 <ledState0+0x6c>
	else if (button_getState(&greenButton) == ACT_RELEASED) {
 8000aaa:	480d      	ldr	r0, [pc, #52]	@ (8000ae0 <ledState0+0x8c>)
 8000aac:	f000 f902 	bl	8000cb4 <button_getState>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d104      	bne.n	8000ac0 <ledState0+0x6c>
		state=case3;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <ledState0+0x84>)
 8000ab8:	2203      	movs	r2, #3
 8000aba:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000abc:	f7ff ffb6 	bl	8000a2c <ledAlloff>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000102 	.word	0x20000102
 8000ac8:	200000e8 	.word	0x200000e8
 8000acc:	200000f0 	.word	0x200000f0
 8000ad0:	200000f8 	.word	0x200000f8
 8000ad4:	200000c4 	.word	0x200000c4
 8000ad8:	20000100 	.word	0x20000100
 8000adc:	200000d0 	.word	0x200000d0
 8000ae0:	200000dc 	.word	0x200000dc

08000ae4 <ledState1>:
void ledState1() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	if (stateCount == 0) {
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <ledState1+0x58>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10b      	bne.n	8000b08 <ledState1+0x24>
		stateCount = 200;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <ledState1+0x58>)
 8000af2:	22c8      	movs	r2, #200	@ 0xc8
 8000af4:	801a      	strh	r2, [r3, #0]

		led_toggle(&redled);
 8000af6:	4812      	ldr	r0, [pc, #72]	@ (8000b40 <ledState1+0x5c>)
 8000af8:	f000 f930 	bl	8000d5c <led_toggle>
		led_off(&yellowled);
 8000afc:	4811      	ldr	r0, [pc, #68]	@ (8000b44 <ledState1+0x60>)
 8000afe:	f000 f91d 	bl	8000d3c <led_off>
		led_off(&greenled);
 8000b02:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <ledState1+0x64>)
 8000b04:	f000 f91a 	bl	8000d3c <led_off>
	}
	if (button_getState(&yellowButton) == ACT_RELEASED) {
 8000b08:	4810      	ldr	r0, [pc, #64]	@ (8000b4c <ledState1+0x68>)
 8000b0a:	f000 f8d3 	bl	8000cb4 <button_getState>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d105      	bne.n	8000b20 <ledState1+0x3c>
		state=case2;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <ledState1+0x6c>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000b1a:	f7ff ff87 	bl	8000a2c <ledAlloff>
		state=case3;
		ledAlloff();
	}


}
 8000b1e:	e00a      	b.n	8000b36 <ledState1+0x52>
	else if (button_getState(&greenButton) == ACT_RELEASED) {
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <ledState1+0x70>)
 8000b22:	f000 f8c7 	bl	8000cb4 <button_getState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d104      	bne.n	8000b36 <ledState1+0x52>
		state=case3;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <ledState1+0x6c>)
 8000b2e:	2203      	movs	r2, #3
 8000b30:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000b32:	f7ff ff7b 	bl	8000a2c <ledAlloff>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000102 	.word	0x20000102
 8000b40:	200000e8 	.word	0x200000e8
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	200000f8 	.word	0x200000f8
 8000b4c:	200000d0 	.word	0x200000d0
 8000b50:	20000100 	.word	0x20000100
 8000b54:	200000dc 	.word	0x200000dc

08000b58 <ledState2>:
void ledState2() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	if (stateCount == 0){
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <ledState2+0x58>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10b      	bne.n	8000b7c <ledState2+0x24>
		stateCount = 100;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <ledState2+0x58>)
 8000b66:	2264      	movs	r2, #100	@ 0x64
 8000b68:	801a      	strh	r2, [r3, #0]

		led_off(&redled);
 8000b6a:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <ledState2+0x5c>)
 8000b6c:	f000 f8e6 	bl	8000d3c <led_off>
		led_toggle(&yellowled);
 8000b70:	4811      	ldr	r0, [pc, #68]	@ (8000bb8 <ledState2+0x60>)
 8000b72:	f000 f8f3 	bl	8000d5c <led_toggle>
		led_toggle(&greenled);
 8000b76:	4811      	ldr	r0, [pc, #68]	@ (8000bbc <ledState2+0x64>)
 8000b78:	f000 f8f0 	bl	8000d5c <led_toggle>
	}
	if (button_getState(&redButton) == ACT_RELEASED) {
 8000b7c:	4810      	ldr	r0, [pc, #64]	@ (8000bc0 <ledState2+0x68>)
 8000b7e:	f000 f899 	bl	8000cb4 <button_getState>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d105      	bne.n	8000b94 <ledState2+0x3c>
		state=case1;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <ledState2+0x6c>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000b8e:	f7ff ff4d 	bl	8000a2c <ledAlloff>
	}
	else if (button_getState(&greenButton) == ACT_RELEASED) {
		state=case3;
		ledAlloff();
	}
}
 8000b92:	e00a      	b.n	8000baa <ledState2+0x52>
	else if (button_getState(&greenButton) == ACT_RELEASED) {
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <ledState2+0x70>)
 8000b96:	f000 f88d 	bl	8000cb4 <button_getState>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d104      	bne.n	8000baa <ledState2+0x52>
		state=case3;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <ledState2+0x6c>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000ba6:	f7ff ff41 	bl	8000a2c <ledAlloff>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000102 	.word	0x20000102
 8000bb4:	200000e8 	.word	0x200000e8
 8000bb8:	200000f0 	.word	0x200000f0
 8000bbc:	200000f8 	.word	0x200000f8
 8000bc0:	200000c4 	.word	0x200000c4
 8000bc4:	20000100 	.word	0x20000100
 8000bc8:	200000dc 	.word	0x200000dc

08000bcc <ledState3>:
void ledState3() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	if (stateCount == 0) {
 8000bd0:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <ledState3+0x58>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10c      	bne.n	8000bf2 <ledState3+0x26>
		stateCount = 1000;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <ledState3+0x58>)
 8000bda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bde:	801a      	strh	r2, [r3, #0]

		led_toggle(&redled);
 8000be0:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <ledState3+0x5c>)
 8000be2:	f000 f8bb 	bl	8000d5c <led_toggle>
		led_off(&yellowled);
 8000be6:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <ledState3+0x60>)
 8000be8:	f000 f8a8 	bl	8000d3c <led_off>
		led_toggle(&greenled);
 8000bec:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <ledState3+0x64>)
 8000bee:	f000 f8b5 	bl	8000d5c <led_toggle>
	}

	if (button_getState(&redButton) == ACT_RELEASED){
 8000bf2:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <ledState3+0x68>)
 8000bf4:	f000 f85e 	bl	8000cb4 <button_getState>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d105      	bne.n	8000c0a <ledState3+0x3e>
		state = case1;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <ledState3+0x6c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000c04:	f7ff ff12 	bl	8000a2c <ledAlloff>
	}
	else if (button_getState(&yellowButton) == ACT_RELEASED){
		state = case2;
		ledAlloff();
	}
}
 8000c08:	e00a      	b.n	8000c20 <ledState3+0x54>
	else if (button_getState(&yellowButton) == ACT_RELEASED){
 8000c0a:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <ledState3+0x70>)
 8000c0c:	f000 f852 	bl	8000cb4 <button_getState>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d104      	bne.n	8000c20 <ledState3+0x54>
		state = case2;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <ledState3+0x6c>)
 8000c18:	2202      	movs	r2, #2
 8000c1a:	701a      	strb	r2, [r3, #0]
		ledAlloff();
 8000c1c:	f7ff ff06 	bl	8000a2c <ledAlloff>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000102 	.word	0x20000102
 8000c28:	200000e8 	.word	0x200000e8
 8000c2c:	200000f0 	.word	0x200000f0
 8000c30:	200000f8 	.word	0x200000f8
 8000c34:	200000c4 	.word	0x200000c4
 8000c38:	20000100 	.word	0x20000100
 8000c3c:	200000d0 	.word	0x200000d0

08000c40 <apMain>:

int apMain() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

	sys_init();
 8000c44:	f7ff febe 	bl	80009c4 <sys_init>

	while (1) {
		switch (state) {
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <apMain+0x44>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d8fb      	bhi.n	8000c48 <apMain+0x8>
 8000c50:	a201      	add	r2, pc, #4	@ (adr r2, 8000c58 <apMain+0x18>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000c6f 	.word	0x08000c6f
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000c7b 	.word	0x08000c7b
		case case0:
			ledState0();
 8000c68:	f7ff fef4 	bl	8000a54 <ledState0>
			break;
 8000c6c:	e009      	b.n	8000c82 <apMain+0x42>
		case case1:
			ledState1();
 8000c6e:	f7ff ff39 	bl	8000ae4 <ledState1>
			break;
 8000c72:	e006      	b.n	8000c82 <apMain+0x42>
		case case2:
			ledState2();
 8000c74:	f7ff ff70 	bl	8000b58 <ledState2>
			break;
 8000c78:	e003      	b.n	8000c82 <apMain+0x42>
		case case3:
			ledState3();
 8000c7a:	f7ff ffa7 	bl	8000bcc <ledState3>
			break;
 8000c7e:	bf00      	nop
 8000c80:	e7e2      	b.n	8000c48 <apMain+0x8>
		switch (state) {
 8000c82:	e7e1      	b.n	8000c48 <apMain+0x8>
 8000c84:	20000100 	.word	0x20000100

08000c88 <button_init>:
 *      Author: kccistc
 */

#include "button.h"

void button_init(button_t *button, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	4613      	mov	r3, r2
 8000c94:	80fb      	strh	r3, [r7, #6]
	button->GPIOx = GPIOx;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin = GPIO_Pin;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	88fa      	ldrh	r2, [r7, #6]
 8000ca0:	809a      	strh	r2, [r3, #4]
	button->prevState = RELEASED;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	609a      	str	r2, [r3, #8]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <button_getState>:

button_state_t button_getState(button_t *button){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

	int curState = HAL_GPIO_ReadPin(button->GPIOx, button->GPIO_Pin);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	889b      	ldrh	r3, [r3, #4]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	f000 fb58 	bl	800137c <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60fb      	str	r3, [r7, #12]
	if((button->prevState == RELEASED) && (curState == PUSHED)){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d10a      	bne.n	8000cee <button_getState+0x3a>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d107      	bne.n	8000cee <button_getState+0x3a>
		HAL_Delay(50);
 8000cde:	2032      	movs	r0, #50	@ 0x32
 8000ce0:	f000 f8be 	bl	8000e60 <HAL_Delay>
		button->prevState = PUSHED;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
		return ACT_PUSHED;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e00f      	b.n	8000d0e <button_getState+0x5a>
	} else if((button->prevState == PUSHED) && (curState == RELEASED)){
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d10a      	bne.n	8000d0c <button_getState+0x58>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d107      	bne.n	8000d0c <button_getState+0x58>
		HAL_Delay(50);
 8000cfc:	2032      	movs	r0, #50	@ 0x32
 8000cfe:	f000 f8af 	bl	8000e60 <HAL_Delay>
		button->prevState = RELEASED;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	609a      	str	r2, [r3, #8]
		return ACT_RELEASED;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	e000      	b.n	8000d0e <button_getState+0x5a>
	}
	return NO_ACT;
 8000d0c:	2302      	movs	r3, #2
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <led_init>:
 */

#include "led.h"


void led_init(led_t *led, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000d16:	b480      	push	{r7}
 8000d18:	b085      	sub	sp, #20
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	4613      	mov	r3, r2
 8000d22:	80fb      	strh	r3, [r7, #6]
	led->GPIOx = GPIOx;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	601a      	str	r2, [r3, #0]
	led->GPIO_Pin = GPIO_Pin;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	809a      	strh	r2, [r3, #4]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <led_off>:

void led_on(led_t *led){
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, SET);
}
void led_off(led_t *led){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, RESET);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f000 fb2c 	bl	80013ac <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <led_toggle>:
void led_toggle(led_t *led){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	889b      	ldrh	r3, [r3, #4]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4610      	mov	r0, r2
 8000d70:	f000 fb35 	bl	80013de <HAL_GPIO_TogglePin>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f931 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fcce 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f911 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000104 	.word	0x20000104

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000104 	.word	0x20000104

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	@ 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e159      	b.n	8001344 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8148 	bne.w	800133e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80a2 	beq.w	800133e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b57      	ldr	r3, [pc, #348]	@ (800135c <HAL_GPIO_Init+0x2e8>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a56      	ldr	r2, [pc, #344]	@ (800135c <HAL_GPIO_Init+0x2e8>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b54      	ldr	r3, [pc, #336]	@ (800135c <HAL_GPIO_Init+0x2e8>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <HAL_GPIO_Init+0x2ec>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a49      	ldr	r2, [pc, #292]	@ (8001364 <HAL_GPIO_Init+0x2f0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x202>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a48      	ldr	r2, [pc, #288]	@ (8001368 <HAL_GPIO_Init+0x2f4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x1fe>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a47      	ldr	r2, [pc, #284]	@ (800136c <HAL_GPIO_Init+0x2f8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x1fa>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a46      	ldr	r2, [pc, #280]	@ (8001370 <HAL_GPIO_Init+0x2fc>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x1f6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a45      	ldr	r2, [pc, #276]	@ (8001374 <HAL_GPIO_Init+0x300>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1f2>
 8001262:	2304      	movs	r3, #4
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x204>
 8001266:	2307      	movs	r3, #7
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x204>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x204>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x204>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x204>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	@ (8001360 <HAL_GPIO_Init+0x2ec>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b38      	ldr	r3, [pc, #224]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e4:	4a24      	ldr	r2, [pc, #144]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <HAL_GPIO_Init+0x304>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130e:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001338:	4a0f      	ldr	r2, [pc, #60]	@ (8001378 <HAL_GPIO_Init+0x304>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f aea2 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e12b      	b.n	800167e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff f9b0 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001478:	f000 fd80 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a81      	ldr	r2, [pc, #516]	@ (8001688 <HAL_I2C_Init+0x274>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d807      	bhi.n	8001498 <HAL_I2C_Init+0x84>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a80      	ldr	r2, [pc, #512]	@ (800168c <HAL_I2C_Init+0x278>)
 800148c:	4293      	cmp	r3, r2
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e006      	b.n	80014a6 <HAL_I2C_Init+0x92>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4a7d      	ldr	r2, [pc, #500]	@ (8001690 <HAL_I2C_Init+0x27c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	bf94      	ite	ls
 80014a0:	2301      	movls	r3, #1
 80014a2:	2300      	movhi	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0e7      	b.n	800167e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a78      	ldr	r2, [pc, #480]	@ (8001694 <HAL_I2C_Init+0x280>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0c9b      	lsrs	r3, r3, #18
 80014b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001688 <HAL_I2C_Init+0x274>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d802      	bhi.n	80014e8 <HAL_I2C_Init+0xd4>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	e009      	b.n	80014fc <HAL_I2C_Init+0xe8>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a69      	ldr	r2, [pc, #420]	@ (8001698 <HAL_I2C_Init+0x284>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	3301      	adds	r3, #1
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	430b      	orrs	r3, r1
 8001502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800150e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	495c      	ldr	r1, [pc, #368]	@ (8001688 <HAL_I2C_Init+0x274>)
 8001518:	428b      	cmp	r3, r1
 800151a:	d819      	bhi.n	8001550 <HAL_I2C_Init+0x13c>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e59      	subs	r1, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fbb1 f3f3 	udiv	r3, r1, r3
 800152a:	1c59      	adds	r1, r3, #1
 800152c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001530:	400b      	ands	r3, r1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <HAL_I2C_Init+0x138>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1e59      	subs	r1, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fbb1 f3f3 	udiv	r3, r1, r3
 8001544:	3301      	adds	r3, #1
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	e051      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 800154c:	2304      	movs	r3, #4
 800154e:	e04f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <HAL_I2C_Init+0x168>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	fbb0 f3f3 	udiv	r3, r0, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e012      	b.n	80015a2 <HAL_I2C_Init+0x18e>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	0099      	lsls	r1, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x196>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e022      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10e      	bne.n	80015d0 <HAL_I2C_Init+0x1bc>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1e58      	subs	r0, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	0099      	lsls	r1, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	6809      	ldr	r1, [r1, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800161e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6911      	ldr	r1, [r2, #16]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68d2      	ldr	r2, [r2, #12]
 800162a:	4311      	orrs	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	000186a0 	.word	0x000186a0
 800168c:	001e847f 	.word	0x001e847f
 8001690:	003d08ff 	.word	0x003d08ff
 8001694:	431bde83 	.word	0x431bde83
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e267      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d075      	beq.n	80017a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ba:	4b88      	ldr	r3, [pc, #544]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d00c      	beq.n	80016e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c6:	4b85      	ldr	r3, [pc, #532]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d112      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d2:	4b82      	ldr	r3, [pc, #520]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016de:	d10b      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e0:	4b7e      	ldr	r3, [pc, #504]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d05b      	beq.n	80017a4 <HAL_RCC_OscConfig+0x108>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d157      	bne.n	80017a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e242      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001700:	d106      	bne.n	8001710 <HAL_RCC_OscConfig+0x74>
 8001702:	4b76      	ldr	r3, [pc, #472]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a75      	ldr	r2, [pc, #468]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e01d      	b.n	800174c <HAL_RCC_OscConfig+0xb0>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x98>
 800171a:	4b70      	ldr	r3, [pc, #448]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6f      	ldr	r2, [pc, #444]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b6d      	ldr	r3, [pc, #436]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a6c      	ldr	r2, [pc, #432]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0xb0>
 8001734:	4b69      	ldr	r3, [pc, #420]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a68      	ldr	r2, [pc, #416]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 800173a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b66      	ldr	r3, [pc, #408]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a65      	ldr	r2, [pc, #404]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d013      	beq.n	800177c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb78 	bl	8000e48 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb74 	bl	8000e48 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	@ 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e207      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b5b      	ldr	r3, [pc, #364]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0xc0>
 800177a:	e014      	b.n	80017a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb64 	bl	8000e48 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fb60 	bl	8000e48 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1f3      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001796:	4b51      	ldr	r3, [pc, #324]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0xe8>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d063      	beq.n	800187a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b2:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d11c      	bne.n	8001804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ca:	4b44      	ldr	r3, [pc, #272]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d116      	bne.n	8001804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	4b41      	ldr	r3, [pc, #260]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_RCC_OscConfig+0x152>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d001      	beq.n	80017ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e1c7      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ee:	4b3b      	ldr	r3, [pc, #236]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4937      	ldr	r1, [pc, #220]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	e03a      	b.n	800187a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d020      	beq.n	800184e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <HAL_RCC_OscConfig+0x244>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fb19 	bl	8000e48 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181a:	f7ff fb15 	bl	8000e48 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1a8      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4925      	ldr	r1, [pc, #148]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184e:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <HAL_RCC_OscConfig+0x244>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff faf8 	bl	8000e48 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185c:	f7ff faf4 	bl	8000e48 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e187      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186e:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d036      	beq.n	80018f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d016      	beq.n	80018bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_RCC_OscConfig+0x248>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001894:	f7ff fad8 	bl	8000e48 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fad4 	bl	8000e48 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e167      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_RCC_OscConfig+0x240>)
 80018b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x200>
 80018ba:	e01b      	b.n	80018f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_RCC_OscConfig+0x248>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c2:	f7ff fac1 	bl	8000e48 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	e00e      	b.n	80018e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ca:	f7ff fabd 	bl	8000e48 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d907      	bls.n	80018e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e150      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	42470000 	.word	0x42470000
 80018e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	4b88      	ldr	r3, [pc, #544]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80018ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1ea      	bne.n	80018ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8097 	beq.w	8001a30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b81      	ldr	r3, [pc, #516]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10f      	bne.n	8001932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b7d      	ldr	r3, [pc, #500]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	@ 0x40
 8001922:	4b7a      	ldr	r3, [pc, #488]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001932:	4b77      	ldr	r3, [pc, #476]	@ (8001b10 <HAL_RCC_OscConfig+0x474>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193e:	4b74      	ldr	r3, [pc, #464]	@ (8001b10 <HAL_RCC_OscConfig+0x474>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a73      	ldr	r2, [pc, #460]	@ (8001b10 <HAL_RCC_OscConfig+0x474>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff fa7d 	bl	8000e48 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff fa79 	bl	8000e48 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e10c      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_OscConfig+0x474>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x2ea>
 8001978:	4b64      	ldr	r3, [pc, #400]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197c:	4a63      	ldr	r2, [pc, #396]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6713      	str	r3, [r2, #112]	@ 0x70
 8001984:	e01c      	b.n	80019c0 <HAL_RCC_OscConfig+0x324>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b05      	cmp	r3, #5
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x30c>
 800198e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001992:	4a5e      	ldr	r2, [pc, #376]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6713      	str	r3, [r2, #112]	@ 0x70
 800199a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0x324>
 80019a8:	4b58      	ldr	r3, [pc, #352]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80019aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ac:	4a57      	ldr	r2, [pc, #348]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b4:	4b55      	ldr	r3, [pc, #340]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b8:	4a54      	ldr	r2, [pc, #336]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d015      	beq.n	80019f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa3e 	bl	8000e48 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff fa3a 	bl	8000e48 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0cb      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e6:	4b49      	ldr	r3, [pc, #292]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0ee      	beq.n	80019d0 <HAL_RCC_OscConfig+0x334>
 80019f2:	e014      	b.n	8001a1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7ff fa28 	bl	8000e48 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff fa24 	bl	8000e48 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e0b5      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a12:	4b3e      	ldr	r3, [pc, #248]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1ee      	bne.n	80019fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a24:	4b39      	ldr	r3, [pc, #228]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	4a38      	ldr	r2, [pc, #224]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a1 	beq.w	8001b7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3a:	4b34      	ldr	r3, [pc, #208]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d05c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d141      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b31      	ldr	r3, [pc, #196]	@ (8001b14 <HAL_RCC_OscConfig+0x478>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff f9f8 	bl	8000e48 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f9f4 	bl	8000e48 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e087      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a6e:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	019b      	lsls	r3, r3, #6
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	3b01      	subs	r3, #1
 8001a94:	041b      	lsls	r3, r3, #16
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	061b      	lsls	r3, r3, #24
 8001a9e:	491b      	ldr	r1, [pc, #108]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <HAL_RCC_OscConfig+0x478>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f9cd 	bl	8000e48 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f9c9 	bl	8000e48 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e05c      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x416>
 8001ad0:	e054      	b.n	8001b7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <HAL_RCC_OscConfig+0x478>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f9b6 	bl	8000e48 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f9b2 	bl	8000e48 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e045      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_RCC_OscConfig+0x470>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x444>
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e038      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40007000 	.word	0x40007000
 8001b14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCC_OscConfig+0x4ec>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d028      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d121      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11a      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d111      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	3b01      	subs	r3, #1
 8001b62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0cc      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b68      	ldr	r3, [pc, #416]	@ (8001d44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d90c      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b65      	ldr	r3, [pc, #404]	@ (8001d44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	@ (8001d44 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a58      	ldr	r2, [pc, #352]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d044      	beq.n	8001cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d119      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d107      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e06f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e067      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6a:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f023 0203 	bic.w	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4934      	ldr	r1, [pc, #208]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f8e4 	bl	8000e48 <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c84:	f7ff f8e0 	bl	8000e48 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e04f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 020c 	and.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d1eb      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cac:	4b25      	ldr	r3, [pc, #148]	@ (8001d44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d20c      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b22      	ldr	r3, [pc, #136]	@ (8001d44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	@ (8001d44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	@ (8001d4c <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_RCC_ClockConfig+0x1c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f844 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023c00 	.word	0x40023c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	080025c4 	.word	0x080025c4
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d5c:	b094      	sub	sp, #80	@ 0x50
 8001d5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d64:	2300      	movs	r3, #0
 8001d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d68:	2300      	movs	r3, #0
 8001d6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d70:	4b79      	ldr	r3, [pc, #484]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d00d      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	f200 80e1 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x34>
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d003      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d8a:	e0db      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b73      	ldr	r3, [pc, #460]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001d90:	e0db      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d92:	4b73      	ldr	r3, [pc, #460]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d96:	e0d8      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d98:	4b6f      	ldr	r3, [pc, #444]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dae:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	099b      	lsrs	r3, r3, #6
 8001db4:	2200      	movs	r2, #0
 8001db6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dca:	4622      	mov	r2, r4
 8001dcc:	462b      	mov	r3, r5
 8001dce:	f04f 0000 	mov.w	r0, #0
 8001dd2:	f04f 0100 	mov.w	r1, #0
 8001dd6:	0159      	lsls	r1, r3, #5
 8001dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ddc:	0150      	lsls	r0, r2, #5
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4621      	mov	r1, r4
 8001de4:	1a51      	subs	r1, r2, r1
 8001de6:	6139      	str	r1, [r7, #16]
 8001de8:	4629      	mov	r1, r5
 8001dea:	eb63 0301 	sbc.w	r3, r3, r1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	018b      	lsls	r3, r1, #6
 8001e00:	4651      	mov	r1, sl
 8001e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e06:	4651      	mov	r1, sl
 8001e08:	018a      	lsls	r2, r1, #6
 8001e0a:	4651      	mov	r1, sl
 8001e0c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e10:	4659      	mov	r1, fp
 8001e12:	eb63 0901 	sbc.w	r9, r3, r1
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e2a:	4690      	mov	r8, r2
 8001e2c:	4699      	mov	r9, r3
 8001e2e:	4623      	mov	r3, r4
 8001e30:	eb18 0303 	adds.w	r3, r8, r3
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	462b      	mov	r3, r5
 8001e38:	eb49 0303 	adc.w	r3, r9, r3
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	024b      	lsls	r3, r1, #9
 8001e4e:	4621      	mov	r1, r4
 8001e50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e54:	4621      	mov	r1, r4
 8001e56:	024a      	lsls	r2, r1, #9
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e68:	f7fe f9b6 	bl	80001d8 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e74:	e058      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e76:	4b38      	ldr	r3, [pc, #224]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	4611      	mov	r1, r2
 8001e82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e90:	4642      	mov	r2, r8
 8001e92:	464b      	mov	r3, r9
 8001e94:	f04f 0000 	mov.w	r0, #0
 8001e98:	f04f 0100 	mov.w	r1, #0
 8001e9c:	0159      	lsls	r1, r3, #5
 8001e9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea2:	0150      	lsls	r0, r2, #5
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4641      	mov	r1, r8
 8001eaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001eae:	4649      	mov	r1, r9
 8001eb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ec8:	ebb2 040a 	subs.w	r4, r2, sl
 8001ecc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	00eb      	lsls	r3, r5, #3
 8001eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ede:	00e2      	lsls	r2, r4, #3
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	18e3      	adds	r3, r4, r3
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	464b      	mov	r3, r9
 8001eec:	eb45 0303 	adc.w	r3, r5, r3
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efe:	4629      	mov	r1, r5
 8001f00:	028b      	lsls	r3, r1, #10
 8001f02:	4621      	mov	r1, r4
 8001f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f08:	4621      	mov	r1, r4
 8001f0a:	028a      	lsls	r2, r1, #10
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f12:	2200      	movs	r2, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	61fa      	str	r2, [r7, #28]
 8001f18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1c:	f7fe f95c 	bl	80001d8 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001f38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x204>)
 8001f46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3750      	adds	r7, #80	@ 0x50
 8001f50:	46bd      	mov	sp, r7
 8001f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	007a1200 	.word	0x007a1200

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4903      	ldr	r1, [pc, #12]	@ (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	080025d4 	.word	0x080025d4

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa8:	f7ff ffdc 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	080025d4 	.word	0x080025d4

08001fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e042      	b.n	8002064 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fc1c 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	@ 0x24
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800200e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f82b 	bl	800206c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800206c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002070:	b0c0      	sub	sp, #256	@ 0x100
 8002072:	af00      	add	r7, sp, #0
 8002074:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002088:	68d9      	ldr	r1, [r3, #12]
 800208a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	ea40 0301 	orr.w	r3, r0, r1
 8002094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80020c4:	f021 010c 	bic.w	r1, r1, #12
 80020c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80020d2:	430b      	orrs	r3, r1
 80020d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80020e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020e6:	6999      	ldr	r1, [r3, #24]
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	ea40 0301 	orr.w	r3, r0, r1
 80020f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	4b8f      	ldr	r3, [pc, #572]	@ (8002338 <UART_SetConfig+0x2cc>)
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d005      	beq.n	800210c <UART_SetConfig+0xa0>
 8002100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b8d      	ldr	r3, [pc, #564]	@ (800233c <UART_SetConfig+0x2d0>)
 8002108:	429a      	cmp	r2, r3
 800210a:	d104      	bne.n	8002116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800210c:	f7ff ff4a 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8002110:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002114:	e003      	b.n	800211e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002116:	f7ff ff31 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 800211a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800211e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002128:	f040 810c 	bne.w	8002344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800212c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002136:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800213a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800213e:	4622      	mov	r2, r4
 8002140:	462b      	mov	r3, r5
 8002142:	1891      	adds	r1, r2, r2
 8002144:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002146:	415b      	adcs	r3, r3
 8002148:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800214a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800214e:	4621      	mov	r1, r4
 8002150:	eb12 0801 	adds.w	r8, r2, r1
 8002154:	4629      	mov	r1, r5
 8002156:	eb43 0901 	adc.w	r9, r3, r1
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800216a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800216e:	4690      	mov	r8, r2
 8002170:	4699      	mov	r9, r3
 8002172:	4623      	mov	r3, r4
 8002174:	eb18 0303 	adds.w	r3, r8, r3
 8002178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800217c:	462b      	mov	r3, r5
 800217e:	eb49 0303 	adc.w	r3, r9, r3
 8002182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002192:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800219a:	460b      	mov	r3, r1
 800219c:	18db      	adds	r3, r3, r3
 800219e:	653b      	str	r3, [r7, #80]	@ 0x50
 80021a0:	4613      	mov	r3, r2
 80021a2:	eb42 0303 	adc.w	r3, r2, r3
 80021a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80021a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80021b0:	f7fe f812 	bl	80001d8 <__aeabi_uldivmod>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4b61      	ldr	r3, [pc, #388]	@ (8002340 <UART_SetConfig+0x2d4>)
 80021ba:	fba3 2302 	umull	r2, r3, r3, r2
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	011c      	lsls	r4, r3, #4
 80021c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80021d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	1891      	adds	r1, r2, r2
 80021da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80021dc:	415b      	adcs	r3, r3
 80021de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80021e4:	4641      	mov	r1, r8
 80021e6:	eb12 0a01 	adds.w	sl, r2, r1
 80021ea:	4649      	mov	r1, r9
 80021ec:	eb43 0b01 	adc.w	fp, r3, r1
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002204:	4692      	mov	sl, r2
 8002206:	469b      	mov	fp, r3
 8002208:	4643      	mov	r3, r8
 800220a:	eb1a 0303 	adds.w	r3, sl, r3
 800220e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002212:	464b      	mov	r3, r9
 8002214:	eb4b 0303 	adc.w	r3, fp, r3
 8002218:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002228:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800222c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002230:	460b      	mov	r3, r1
 8002232:	18db      	adds	r3, r3, r3
 8002234:	643b      	str	r3, [r7, #64]	@ 0x40
 8002236:	4613      	mov	r3, r2
 8002238:	eb42 0303 	adc.w	r3, r2, r3
 800223c:	647b      	str	r3, [r7, #68]	@ 0x44
 800223e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002246:	f7fd ffc7 	bl	80001d8 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4611      	mov	r1, r2
 8002250:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <UART_SetConfig+0x2d4>)
 8002252:	fba3 2301 	umull	r2, r3, r3, r1
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2264      	movs	r2, #100	@ 0x64
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	1acb      	subs	r3, r1, r3
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002266:	4b36      	ldr	r3, [pc, #216]	@ (8002340 <UART_SetConfig+0x2d4>)
 8002268:	fba3 2302 	umull	r2, r3, r3, r2
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002274:	441c      	add	r4, r3
 8002276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002280:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002288:	4642      	mov	r2, r8
 800228a:	464b      	mov	r3, r9
 800228c:	1891      	adds	r1, r2, r2
 800228e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002290:	415b      	adcs	r3, r3
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002298:	4641      	mov	r1, r8
 800229a:	1851      	adds	r1, r2, r1
 800229c:	6339      	str	r1, [r7, #48]	@ 0x30
 800229e:	4649      	mov	r1, r9
 80022a0:	414b      	adcs	r3, r1
 80022a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80022b0:	4659      	mov	r1, fp
 80022b2:	00cb      	lsls	r3, r1, #3
 80022b4:	4651      	mov	r1, sl
 80022b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ba:	4651      	mov	r1, sl
 80022bc:	00ca      	lsls	r2, r1, #3
 80022be:	4610      	mov	r0, r2
 80022c0:	4619      	mov	r1, r3
 80022c2:	4603      	mov	r3, r0
 80022c4:	4642      	mov	r2, r8
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022cc:	464b      	mov	r3, r9
 80022ce:	460a      	mov	r2, r1
 80022d0:	eb42 0303 	adc.w	r3, r2, r3
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80022e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80022e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80022ec:	460b      	mov	r3, r1
 80022ee:	18db      	adds	r3, r3, r3
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f2:	4613      	mov	r3, r2
 80022f4:	eb42 0303 	adc.w	r3, r2, r3
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002302:	f7fd ff69 	bl	80001d8 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <UART_SetConfig+0x2d4>)
 800230c:	fba3 1302 	umull	r1, r3, r3, r2
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2164      	movs	r1, #100	@ 0x64
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	3332      	adds	r3, #50	@ 0x32
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <UART_SetConfig+0x2d4>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4422      	add	r2, r4
 8002332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002334:	e106      	b.n	8002544 <UART_SetConfig+0x4d8>
 8002336:	bf00      	nop
 8002338:	40011000 	.word	0x40011000
 800233c:	40011400 	.word	0x40011400
 8002340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002348:	2200      	movs	r2, #0
 800234a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800234e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002356:	4642      	mov	r2, r8
 8002358:	464b      	mov	r3, r9
 800235a:	1891      	adds	r1, r2, r2
 800235c:	6239      	str	r1, [r7, #32]
 800235e:	415b      	adcs	r3, r3
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
 8002362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002366:	4641      	mov	r1, r8
 8002368:	1854      	adds	r4, r2, r1
 800236a:	4649      	mov	r1, r9
 800236c:	eb43 0501 	adc.w	r5, r3, r1
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	00eb      	lsls	r3, r5, #3
 800237a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237e:	00e2      	lsls	r2, r4, #3
 8002380:	4614      	mov	r4, r2
 8002382:	461d      	mov	r5, r3
 8002384:	4643      	mov	r3, r8
 8002386:	18e3      	adds	r3, r4, r3
 8002388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800238c:	464b      	mov	r3, r9
 800238e:	eb45 0303 	adc.w	r3, r5, r3
 8002392:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023b2:	4629      	mov	r1, r5
 80023b4:	008b      	lsls	r3, r1, #2
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023bc:	4621      	mov	r1, r4
 80023be:	008a      	lsls	r2, r1, #2
 80023c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80023c4:	f7fd ff08 	bl	80001d8 <__aeabi_uldivmod>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <UART_SetConfig+0x4e4>)
 80023ce:	fba3 2302 	umull	r2, r3, r3, r2
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	011c      	lsls	r4, r3, #4
 80023d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023da:	2200      	movs	r2, #0
 80023dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80023e8:	4642      	mov	r2, r8
 80023ea:	464b      	mov	r3, r9
 80023ec:	1891      	adds	r1, r2, r2
 80023ee:	61b9      	str	r1, [r7, #24]
 80023f0:	415b      	adcs	r3, r3
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f8:	4641      	mov	r1, r8
 80023fa:	1851      	adds	r1, r2, r1
 80023fc:	6139      	str	r1, [r7, #16]
 80023fe:	4649      	mov	r1, r9
 8002400:	414b      	adcs	r3, r1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002410:	4659      	mov	r1, fp
 8002412:	00cb      	lsls	r3, r1, #3
 8002414:	4651      	mov	r1, sl
 8002416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241a:	4651      	mov	r1, sl
 800241c:	00ca      	lsls	r2, r1, #3
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	4603      	mov	r3, r0
 8002424:	4642      	mov	r2, r8
 8002426:	189b      	adds	r3, r3, r2
 8002428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800242c:	464b      	mov	r3, r9
 800242e:	460a      	mov	r2, r1
 8002430:	eb42 0303 	adc.w	r3, r2, r3
 8002434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002442:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002450:	4649      	mov	r1, r9
 8002452:	008b      	lsls	r3, r1, #2
 8002454:	4641      	mov	r1, r8
 8002456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800245a:	4641      	mov	r1, r8
 800245c:	008a      	lsls	r2, r1, #2
 800245e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002462:	f7fd feb9 	bl	80001d8 <__aeabi_uldivmod>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4611      	mov	r1, r2
 800246c:	4b38      	ldr	r3, [pc, #224]	@ (8002550 <UART_SetConfig+0x4e4>)
 800246e:	fba3 2301 	umull	r2, r3, r3, r1
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2264      	movs	r2, #100	@ 0x64
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	1acb      	subs	r3, r1, r3
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	3332      	adds	r3, #50	@ 0x32
 8002480:	4a33      	ldr	r2, [pc, #204]	@ (8002550 <UART_SetConfig+0x4e4>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800248c:	441c      	add	r4, r3
 800248e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002492:	2200      	movs	r2, #0
 8002494:	673b      	str	r3, [r7, #112]	@ 0x70
 8002496:	677a      	str	r2, [r7, #116]	@ 0x74
 8002498:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800249c:	4642      	mov	r2, r8
 800249e:	464b      	mov	r3, r9
 80024a0:	1891      	adds	r1, r2, r2
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	415b      	adcs	r3, r3
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ac:	4641      	mov	r1, r8
 80024ae:	1851      	adds	r1, r2, r1
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	4649      	mov	r1, r9
 80024b4:	414b      	adcs	r3, r1
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024c4:	4659      	mov	r1, fp
 80024c6:	00cb      	lsls	r3, r1, #3
 80024c8:	4651      	mov	r1, sl
 80024ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ce:	4651      	mov	r1, sl
 80024d0:	00ca      	lsls	r2, r1, #3
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	4642      	mov	r2, r8
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024de:	464b      	mov	r3, r9
 80024e0:	460a      	mov	r2, r1
 80024e2:	eb42 0303 	adc.w	r3, r2, r3
 80024e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80024f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002500:	4649      	mov	r1, r9
 8002502:	008b      	lsls	r3, r1, #2
 8002504:	4641      	mov	r1, r8
 8002506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800250a:	4641      	mov	r1, r8
 800250c:	008a      	lsls	r2, r1, #2
 800250e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002512:	f7fd fe61 	bl	80001d8 <__aeabi_uldivmod>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <UART_SetConfig+0x4e4>)
 800251c:	fba3 1302 	umull	r1, r3, r3, r2
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	2164      	movs	r1, #100	@ 0x64
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	3332      	adds	r3, #50	@ 0x32
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <UART_SetConfig+0x4e4>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	f003 020f 	and.w	r2, r3, #15
 800253a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4422      	add	r2, r4
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800254a:	46bd      	mov	sp, r7
 800254c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002550:	51eb851f 	.word	0x51eb851f

08002554 <memset>:
 8002554:	4402      	add	r2, r0
 8002556:	4603      	mov	r3, r0
 8002558:	4293      	cmp	r3, r2
 800255a:	d100      	bne.n	800255e <memset+0xa>
 800255c:	4770      	bx	lr
 800255e:	f803 1b01 	strb.w	r1, [r3], #1
 8002562:	e7f9      	b.n	8002558 <memset+0x4>

08002564 <__libc_init_array>:
 8002564:	b570      	push	{r4, r5, r6, lr}
 8002566:	4d0d      	ldr	r5, [pc, #52]	@ (800259c <__libc_init_array+0x38>)
 8002568:	4c0d      	ldr	r4, [pc, #52]	@ (80025a0 <__libc_init_array+0x3c>)
 800256a:	1b64      	subs	r4, r4, r5
 800256c:	10a4      	asrs	r4, r4, #2
 800256e:	2600      	movs	r6, #0
 8002570:	42a6      	cmp	r6, r4
 8002572:	d109      	bne.n	8002588 <__libc_init_array+0x24>
 8002574:	4d0b      	ldr	r5, [pc, #44]	@ (80025a4 <__libc_init_array+0x40>)
 8002576:	4c0c      	ldr	r4, [pc, #48]	@ (80025a8 <__libc_init_array+0x44>)
 8002578:	f000 f818 	bl	80025ac <_init>
 800257c:	1b64      	subs	r4, r4, r5
 800257e:	10a4      	asrs	r4, r4, #2
 8002580:	2600      	movs	r6, #0
 8002582:	42a6      	cmp	r6, r4
 8002584:	d105      	bne.n	8002592 <__libc_init_array+0x2e>
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	f855 3b04 	ldr.w	r3, [r5], #4
 800258c:	4798      	blx	r3
 800258e:	3601      	adds	r6, #1
 8002590:	e7ee      	b.n	8002570 <__libc_init_array+0xc>
 8002592:	f855 3b04 	ldr.w	r3, [r5], #4
 8002596:	4798      	blx	r3
 8002598:	3601      	adds	r6, #1
 800259a:	e7f2      	b.n	8002582 <__libc_init_array+0x1e>
 800259c:	080025e4 	.word	0x080025e4
 80025a0:	080025e4 	.word	0x080025e4
 80025a4:	080025e4 	.word	0x080025e4
 80025a8:	080025e8 	.word	0x080025e8

080025ac <_init>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr

080025b8 <_fini>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr
